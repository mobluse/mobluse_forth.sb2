{
	"objName": "Stage",
	"variables": [{
			"name": "Current_row",
			"value": 4,
			"isPersistent": false
		},
		{
			"name": "Current_column",
			"value": 1,
			"isPersistent": false
		},
		{
			"name": "Character",
			"value": "_",
			"isPersistent": false
		},
		{
			"name": "String",
			"value": "",
			"isPersistent": false
		},
		{
			"name": "Popped",
			"value": -1,
			"isPersistent": false
		},
		{
			"name": "Number",
			"value": 13,
			"isPersistent": false
		},
		{
			"name": "CHARACTERS",
			"value": "☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂▀▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▐░▒▓▔▕▖▗▘▙▚▛▜▝▞▟─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍╎╏═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳╴╵╶╷╸╹╺╻╼╽╾╿",
			"isPersistent": false
		},
		{
			"name": "TermInpBuf",
			"value": "",
			"isPersistent": false
		},
		{
			"name": "CP437",
			"value": "☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼",
			"isPersistent": false
		},
		{
			"name": "ASCII",
			"value": " !\"#$%&'()*+,-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂",
			"isPersistent": false
		},
		{
			"name": "BOX_ELEMENTS",
			"value": "▀▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▐░▒▓▔▕▖▗▘▙▚▛▜▝▞▟",
			"isPersistent": false
		},
		{
			"name": "BOX_DRAWING",
			"value": "─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍╎╏═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳╴╵╶╷╸╹╺╻╼╽╾╿",
			"isPersistent": false
		},
		{
			"name": "TRUE",
			"value": true,
			"isPersistent": false
		},
		{
			"name": "FALSE",
			"value": false,
			"isPersistent": false
		},
		{
			"name": "Inkey",
			"value": "",
			"isPersistent": false
		},
		{
			"name": "Running",
			"value": false,
			"isPersistent": false
		}],
	"lists": [{
			"listName": "Built_in",
			"contents": ["INKEY",
				"MS",
				"TIMER",
				"TIME&DATE",
				"BELL",
				"DRUM",
				"REST",
				"PLAY",
				"GOTO-XY",
				"MOVE",
				"DOWN",
				"UP",
				"CLEAR",
				"PAGE",
				"AT-XY",
				"POS@",
				"EMIT",
				".\"",
				"CR",
				"SPACE",
				"SPACES",
				"+",
				"-",
				"*",
				"\/",
				"F\/",
				"INT",
				"FLOOR",
				"FROUND",
				"1+",
				"1-",
				"2+",
				"2-",
				"2*",
				"2\/",
				"MOD",
				"\/MOD",
				"*\/",
				"*\/MOD",
				".",
				".R",
				".S",
				"(",
				"DROP",
				"2DROP",
				"DUP",
				"2DUP",
				"SWAP",
				"2SWAP",
				"ROT",
				"2ROT",
				"OVER",
				"2OVER",
				"ABS",
				"NEGATE",
				"MIN",
				"MAX",
				">R",
				"R>",
				"I",
				"I'",
				"J",
				"K",
				"R.S",
				":",
				"MARKER",
				"CREATE",
				"DOES>",
				",",
				"ALLOT",
				"VARIABLE",
				"!",
				"+!",
				"@",
				"CONSTANT",
				"=",
				"<",
				">",
				"INVERT",
				"0=",
				"0<",
				"AND",
				"OR",
				"?DUP",
				"ABORT\"",
				"QUIT",
				"?STACK",
				"IF",
				"ELSE",
				"THEN",
				"[CHAR]",
				"EXIT",
				"EXECUTE",
				"'",
				"[']",
				"POSTPONE",
				"DO",
				"LOOP",
				"+LOOP",
				"LEAVE",
				"?DO",
				"BEGIN",
				"WHILE",
				"REPEAT",
				"UNTIL",
				".KEYB",
				"IMMEDIATE",
				"HERE",
				"FORGET",
				"WORDS"],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 222,
			"height": 322,
			"visible": false
		},
		{
			"listName": "Defs",
			"contents": [],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 130,
			"height": 230,
			"visible": false
		},
		{
			"listName": "Words",
			"contents": ["CORE",
				"BL",
				"INSTRUMENT",
				"TEMPO",
				"VOL",
				"X",
				"Y",
				"DIR",
				"COLOR",
				"HUE",
				"SHADE",
				"SIZE",
				"R@",
				"ABORT",
				"U.",
				"U<",
				"EXT",
				"FALSE",
				"TRUE",
				"U.R",
				"U>",
				"0>",
				"NIP",
				"TUCK",
				"?",
				"TASK",
				"-ROT",
				"CELLS",
				"CELL+",
				"ERASE",
				"DUMP",
				"FILL",
				"C!",
				"C@",
				"C,",
				"KEY"],
			"isPersistent": false,
			"x": 146,
			"y": 150,
			"width": 260,
			"height": 214,
			"visible": false
		},
		{
			"listName": "Word_code",
			"contents": [1,
				4,
				8,
				12,
				16,
				20,
				24,
				28,
				32,
				36,
				40,
				44,
				48,
				52,
				57,
				61,
				65,
				68,
				72,
				76,
				80,
				84,
				89,
				96,
				103,
				108,
				111,
				118,
				121,
				125,
				142,
				161,
				180,
				184,
				188,
				192],
			"isPersistent": false,
			"x": 1,
			"y": 3,
			"width": 258,
			"height": 358,
			"visible": false
		},
		{
			"listName": "Codes",
			"contents": [1,
				1,
				"EXIT",
				2,
				2,
				"32",
				"EXIT",
				3,
				2,
				"-1",
				"EXIT",
				4,
				2,
				"-2",
				"EXIT",
				5,
				2,
				"-3",
				"EXIT",
				6,
				2,
				"-4",
				"EXIT",
				7,
				2,
				"-5",
				"EXIT",
				8,
				2,
				"-6",
				"EXIT",
				9,
				2,
				"-7",
				"EXIT",
				10,
				2,
				"-8",
				"EXIT",
				11,
				2,
				"-9",
				"EXIT",
				12,
				2,
				"-10",
				"EXIT",
				13,
				2,
				"I'",
				"EXIT",
				14,
				3,
				"ABORT\"",
				"",
				"EXIT",
				15,
				2,
				".",
				"EXIT",
				16,
				2,
				"<",
				"EXIT",
				17,
				1,
				"EXIT",
				18,
				2,
				"0",
				"EXIT",
				19,
				2,
				"-1",
				"EXIT",
				20,
				2,
				".R",
				"EXIT",
				21,
				2,
				">",
				"EXIT",
				22,
				3,
				"0",
				">",
				"EXIT",
				23,
				5,
				"(",
				"a b -- b ",
				"swap",
				"drop",
				"EXIT",
				24,
				5,
				"(",
				"a b -- b a b ",
				"swap",
				"over",
				"EXIT",
				25,
				3,
				"@",
				".",
				"EXIT",
				26,
				1,
				"EXIT",
				27,
				5,
				"(",
				"a b c -- c a b ",
				"rot",
				"rot",
				"EXIT",
				28,
				1,
				"EXIT",
				29,
				2,
				"1+",
				"EXIT",
				30,
				15,
				"(",
				"addr n -- ",
				"CELLS",
				"OVER",
				"+",
				"SWAP",
				"DO",
				"0",
				"I",
				"!",
				"1",
				"CELLS",
				"+LOOP",
				-6,
				"EXIT",
				31,
				17,
				"(",
				"addr n -- ",
				"CELLS",
				"OVER",
				"+",
				"SWAP",
				"DO",
				"CR",
				"I",
				"@",
				"5",
				"U.R",
				"1",
				"CELLS",
				"+LOOP",
				-8,
				"EXIT",
				32,
				17,
				"(",
				"addr n b -- ",
				"-ROT",
				"CELLS",
				"OVER",
				"+",
				"SWAP",
				"DO",
				"DUP",
				"I",
				"!",
				"1",
				"CELLS",
				"+LOOP",
				-6,
				"DROP",
				"EXIT",
				33,
				2,
				"!",
				"EXIT",
				34,
				2,
				"@",
				"EXIT",
				35,
				2,
				",",
				"EXIT",
				36,
				9,
				"(",
				"-- ascii ",
				"50",
				"MS",
				"INKEY",
				"?DUP",
				"UNTIL",
				-5,
				"EXIT"],
			"isPersistent": false,
			"x": 283,
			"y": 6,
			"width": 182,
			"height": 358,
			"visible": false
		},
		{
			"listName": "Immediates",
			"contents": ["IF",
				"ELSE",
				"THEN",
				"[CHAR]",
				"DO",
				"LOOP",
				"+LOOP",
				"LEAVE",
				"?DO",
				"BEGIN",
				"UNTIL",
				"WHILE",
				"REPEAT",
				".\"",
				"(",
				"ABORT\"",
				"[']",
				"POSTPONE",
				"BOTH",
				"ORELSE",
				"NEITHER"],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 242,
			"height": 342,
			"visible": false
		},
		{
			"listName": "Terminated",
			"contents": ["\"", "("],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 228,
			"height": 328,
			"visible": false
		},
		{
			"listName": "Terminator",
			"contents": ["\"", ")"],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 228,
			"height": 328,
			"visible": false
		},
		{
			"listName": "Examples",
			"contents": [],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 234,
			"height": 359,
			"visible": false
		},
		{
			"listName": "History",
			"contents": [": TASK2 ; : QUADRATIC ( a b c x -- n ) >R SWAP ROT R@ *  + R> *  + ; 2 7 9 3 QUADRATIC .", ": GIFT  .\" chocolate\" ; : GIVER  .\" Mum\" ; : THANKS  CR .\" Dear \" GIVER .\" ,\" CR  .\"  Thanks for the \" GIFT .\" . \" ; THANKS", ": STAR  [CHAR] * EMIT ;  : STARS  0 ?DO STAR LOOP ;  : MARGIN  CR 25 SPACES ;  : BLIP  MARGIN STAR ;  : BAR  MARGIN 5 STARS ;  : F  BAR BLIP BAR BLIP BLIP CR ; F", ": FACT  ?DUP IF DUP 1 - FACT * ELSE 1 THEN ; 7 FACT .", ": EVEN? ; : ODD?  DUP 0= IF EXIT THEN 1 - EVEN? ; : EVEN?  DUP 0= IF 1 - EXIT THEN 1 - ODD? ; 8 ODD? . 8 EVEN? .", ": .charset 1 do i emit loop ; 159 .charset", ": .matrix ( r c -- ) swap 0 ?do cr dup 0 ?do .\" (\" j 1 + . .\" ,\" i 1 + . .\" ) \" loop loop drop ; 5 3 .matrix", ": R% ( n1 % -- n2 ) 10 *\/ 5 + 10 \/ ; : DOUBLED ( amount interest -- ) OVER 2* SWAP ROT 21 1 DO CR .\" Year \" I 2 .R 3 SPACES 2DUP R% + DUP .\" Bal \" . DUP 2OVER DROP > IF CR CR .\" More than doubled in \" I . .\" years \" LEAVE THEN LOOP 2DROP DROP ; 3000 11 DOUBLED", ": COUNTS  ' ROT ROT 0 DO  OVER EXECUTE LOOP  NIP ; : CONVICTED-OF  ( -- no-sentence )  0 ; : ARSON         ( sentence -- sentence+10 )  10 + ; : HOMICIDE      ( sentence -- sentence+20 )  20 + ; : BOOKMAKING    ( sentence -- sentence+2 )  2 + ; : TAX-EVASION   ( sentence -- sentence+5 )  5 + ; : WILL-SERVE    ( sentence -- )  . .\" years \" ; CONVICTED-OF BOOKMAKING 3 COUNTS TAX-EVASION WILL-SERVE", ": BOTH    postpone IF   postpone IF ; immediate : ORELSE  postpone THEN postpone ELSE postpone IF ; immediate : NEITHER postpone THEN postpone THEN ; immediate : fb ( n -- )  dup 5 mod 0=  over 3 mod 0=  BOTH   .\" FizzBuzz \"  ELSE   .\" Fizz \"  ORELSE .\" Buzz \"  ELSE   dup .  NEITHER drop ; : fizzbuzz ( n -- ) 0 do i 1+ fb loop ; 100 fizzbuzz", ": STRING   CREATE ALLOT  DOES> + ; 5 STRING VALVE  3 VALVE C@ .", ": PENTAGRAM 0x00ff0000 COLOR ! 5 0 -200 MOVE DOWN DO 200 MOVE 144 DIR +! I 1+ 0.25 DRUM LOOP UP ; PENTAGRAM  FORGET TASK2"],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 206,
			"height": 359,
			"visible": false
		}],
	"scripts": [[10,
			10,
			[["procDef", "add_examples", [], [], false],
				["deleteLine:ofList:", "all", "Examples"],
				["call", "defex %s", ": TASK2 ; : QUADRATIC ( a b c x -- n ) >R SWAP ROT R@ *  + R> *  + ; 2 7 9 3 QUADRATIC ."],
				["call", "defex %s", ": GIFT  .\" chocolate\" ; : GIVER  .\" Mum\" ; : THANKS  CR .\" Dear \" GIVER .\" ,\" CR  .\"  Thanks for the \" GIFT .\" . \" ; THANKS"],
				["call", "defex %s", ": STAR  [CHAR] * EMIT ;  : STARS  0 ?DO STAR LOOP ;  : MARGIN  CR 25 SPACES ;  : BLIP  MARGIN STAR ;  : BAR  MARGIN 5 STARS ;  : F  BAR BLIP BAR BLIP BLIP CR ; F"],
				["call", "defex %s", ": FACT  ?DUP IF DUP 1 - FACT * ELSE 1 THEN ; 7 FACT ."],
				["call", "defex %s", ": EVEN? ; : ODD?  DUP 0= IF EXIT THEN 1 - EVEN? ; : EVEN?  DUP 0= IF 1 - EXIT THEN 1 - ODD? ; 8 ODD? . 8 EVEN? ."],
				["call", "defex %s", ": .charset 1 do i emit loop ; 159 .charset"],
				["call", "defex %s", ": .matrix ( r c -- ) swap 0 ?do cr dup 0 ?do .\" (\" j 1 + . .\" ,\" i 1 + . .\" ) \" loop loop drop ; 5 3 .matrix"],
				["call", "defex %s", ": R% ( n1 % -- n2 ) 10 *\/ 5 + 10 \/ ; : DOUBLED ( amount interest -- ) OVER 2* SWAP ROT 21 1 DO CR .\" Year \" I 2 .R 3 SPACES 2DUP R% + DUP .\" Bal \" . DUP 2OVER DROP > IF CR CR .\" More than doubled in \" I . .\" years \" LEAVE THEN LOOP 2DROP DROP ; 3000 11 DOUBLED"],
				["call", "defex %s", ": COUNTS  ' ROT ROT 0 DO  OVER EXECUTE LOOP  NIP ; : CONVICTED-OF  ( -- no-sentence )  0 ; : ARSON         ( sentence -- sentence+10 )  10 + ; : HOMICIDE      ( sentence -- sentence+20 )  20 + ; : BOOKMAKING    ( sentence -- sentence+2 )  2 + ; : TAX-EVASION   ( sentence -- sentence+5 )  5 + ; : WILL-SERVE    ( sentence -- )  . .\" years \" ; CONVICTED-OF BOOKMAKING 3 COUNTS TAX-EVASION WILL-SERVE"],
				["call", "defex %s", ": BOTH    postpone IF   postpone IF ; immediate : ORELSE  postpone THEN postpone ELSE postpone IF ; immediate : NEITHER postpone THEN postpone THEN ; immediate : fb ( n -- )  dup 5 mod 0=  over 3 mod 0=  BOTH   .\" FizzBuzz \"  ELSE   .\" Fizz \"  ORELSE .\" Buzz \"  ELSE   dup .  NEITHER drop ; : fizzbuzz ( n -- ) 0 do i 1+ fb loop ; 100 fizzbuzz"],
				["call", "defex %s", ": STRING   CREATE ALLOT  DOES> + ; 5 STRING VALVE  3 VALVE C@ ."],
				["call", "defex %s", ": PENTAGRAM 0x00ff0000 COLOR ! 5 0 -200 MOVE DOWN DO 200 MOVE 144 DIR +! I 1+ 0.25 DRUM LOOP UP ; PENTAGRAM  FORGET TASK2"],
				["stopScripts", "this script"]]],
		[10,
			387,
			[["procDef", "add_defs", [], [], false],
				["deleteLine:ofList:", "all", "Defs"],
				["call", "def %s", ": CORE ;"],
				["call", "def %s", "32 CONSTANT BL"],
				["call", "def %s", "-1 CONSTANT INSTRUMENT"],
				["call", "def %s", "-2 CONSTANT TEMPO"],
				["call", "def %s", "-3 CONSTANT VOL"],
				["call", "def %s", "-4 CONSTANT X"],
				["call", "def %s", "-5 CONSTANT Y"],
				["call", "def %s", "-6 CONSTANT DIR"],
				["call", "def %s", "-7 CONSTANT COLOR"],
				["call", "def %s", "-8 CONSTANT HUE"],
				["call", "def %s", "-9 CONSTANT SHADE"],
				["call", "def %s", "-10 CONSTANT SIZE"],
				["call", "def %s", ": R@ I' ;"],
				["call", "def %s", ": ABORT  ABORT\" \" ;"],
				["call", "def %s", ": U.  . ;"],
				["call", "def %s", ": U<  < ;"],
				["call", "def %s", ": EXT ;"],
				["call", "def %s", ": FALSE  0 ;"],
				["call", "def %s", ": TRUE  -1 ;"],
				["call", "def %s", ": U.R  .R ;"],
				["call", "def %s", ": U>  > ;"],
				["call", "def %s", ": 0>  0 > ;"],
				["call", "def %s", ": NIP  ( a b -- b ) swap drop ;"],
				["call", "def %s", ": TUCK  ( a b -- b a b ) swap over ;"],
				["call", "def %s", ": ?  @ . ;"],
				["call", "def %s", ": TASK ;"],
				["call", "def %s", ": -ROT  ( a b c -- c a b ) rot rot ;"],
				["call", "def %s", ": CELLS ;"],
				["call", "def %s", ": CELL+ 1+ ;"],
				["call", "def %s", ": ERASE ( addr n -- ) CELLS OVER + SWAP DO 0 I ! 1 CELLS +LOOP ;"],
				["call", "def %s", ": DUMP ( addr n -- ) CELLS OVER + SWAP DO CR I @ 5 U.R 1 CELLS +LOOP ;"],
				["call", "def %s", ": FILL ( addr n b -- ) -ROT CELLS OVER + SWAP DO DUP I ! 1 CELLS +LOOP DROP ;"],
				["call", "def %s", ": C! ! ;"],
				["call", "def %s", ": C@ @ ;"],
				["call", "def %s", ": C, , ;"],
				["call", "def %s", ": KEY ( -- ascii ) BEGIN 50 MS INKEY ?DUP UNTIL ;"],
				["stopScripts", "this script"]]],
		[10,
			1292,
			[["procDef", "defex %s", ["string1"], [""], false],
				["append:toList:", ["getParam", "string1", "r"], "Examples"]]],
		[10,
			1405,
			[["procDef", "def %s", ["string1"], [""], false],
				["append:toList:", ["getParam", "string1", "r"], "Defs"]]],
		[10,
			1518,
			[["whenIReceive", "run_defs"],
				["call", "add_defs"],
				["setVar:to:", "Number", "1"],
				["doRepeat",
					["lineCountOfList:", "Defs"],
					[["setVar:to:", "TermInpBuf", ["getLine:ofList:", ["readVariable", "Number"], "Defs"]],
						["doBroadcastAndWait", "evaluate_buffer"],
						["changeVar:by:", "Number", 1]]],
				["deleteLine:ofList:", "all", "Defs"],
				["stopScripts", "this script"]]],
		[10,
			1764,
			[["whenIReceive", "run_examples"],
				["call", "add_examples"],
				["setVar:to:", "Number", "1"],
				["doRepeat",
					["lineCountOfList:", "Examples"],
					[["call", "PAGE"],
						["call", "run_example %n", ["readVariable", "Number"]],
						["wait:elapsed:from:", 2],
						["changeVar:by:", "Number", 1]]],
				["call", "PAGE"],
				["clearPenTrails"],
				["deleteLine:ofList:", "all", "Examples"],
				["stopScripts", "this script"]]],
		[10,
			2072,
			[["procDef", "run_example %n", ["ex"], [0], false],
				["setVar:to:", "TermInpBuf", ["getLine:ofList:", ["getParam", "ex", "r"], "Examples"]],
				["call", "..DQ. %s", ["concatenate:with:", ["readVariable", "TermInpBuf"], " "]],
				["doBroadcastAndWait", "evaluate_buffer"],
				["doBroadcastAndWait", "print_response"],
				["append:toList:", ["readVariable", "TermInpBuf"], "History"],
				["stopScripts", "this script"]]],
		[10, 2310, [["whenIReceive", "run_example"], ["call", "run_example %n", ["readVariable", "Number"]]]],
		[10,
			2380,
			[["procDef", "..DQ. %s", ["s"], [""], false],
				["setVar:to:", "String", ["getParam", "s", "r"]],
				["doBroadcastAndWait", "print"]]],
		[10, 2515, [["procDef", "PAGE", [], [], false], ["doBroadcastAndWait", "cls"]]]],
	"costumes": [{
			"costumeName": "orange",
			"baseLayerID": 7,
			"baseLayerMD5": "8d1a951d027e2f4bf4710b3e92ff761b.png",
			"bitmapResolution": 2,
			"rotationCenterX": 480,
			"rotationCenterY": 360
		},
		{
			"costumeName": "black",
			"baseLayerID": 8,
			"baseLayerMD5": "f5e250886e3bafbbd9bc2398a5e321c5.png",
			"bitmapResolution": 2,
			"rotationCenterX": 480,
			"rotationCenterY": 360
		}],
	"currentCostumeIndex": 0,
	"penLayerMD5": "5c81a336fab8be57adc039a8a2b33ca9.png",
	"penLayerID": 0,
	"tempoBPM": 60,
	"videoAlpha": 0.5,
	"children": [{
			"objName": "Screen",
			"variables": [{
					"name": "row0",
					"value": "#MOBLuSE_FORTH 0.11.3",
					"isPersistent": false
				},
				{
					"name": "row1",
					"value": "© 2016 Orbin, Lund, Sweden",
					"isPersistent": false
				},
				{
					"name": "row2",
					"value": "FOSS with license CC BY-SA 2.0",
					"isPersistent": false
				},
				{
					"name": "row3",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row4",
					"value": "_",
					"isPersistent": false
				},
				{
					"name": "row5",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row6",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row7",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row8",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row9",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row10",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row11",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row12",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row13",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row14",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row15",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row16",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "row17",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "~string",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "~index",
					"value": "1",
					"isPersistent": false
				},
				{
					"name": "~characters_per_line",
					"value": "34",
					"isPersistent": false
				}],
			"scripts": [[10,
					10,
					[["whenIReceive", "initScreen"],
						["hide"],
						["setVar:to:", "String", ""],
						["setVar:to:", "Character", ""],
						["setVar:to:", "~characters_per_line", "34"]]],
				[10,
					142,
					[["whenIReceive", "print"],
						["setVar:to:", "~index", "1"],
						["doRepeat",
							["stringLength:", ["readVariable", "String"]],
							[["setVar:to:", "Character", ["letter:of:", ["readVariable", "~index"], ["readVariable", "String"]]],
								["call", "~print_one"],
								["changeVar:by:", "~index", 1]]]]],
				[10, 327, [["whenIReceive", "print_one"], ["call", "~print_one"]]],
				[10,
					393,
					[["procDef", "~print_one", [], [], false],
						["doIf",
							["not", ["<", ["readVariable", "Current_column"], ["readVariable", "~characters_per_line"]]],
							[["setVar:to:", "Current_column", "0"], ["changeVar:by:", "Current_row", 1]]],
						["doIf", [">", ["readVariable", "Current_row"], "17"], [["doBroadcastAndWait", "scroll"]]],
						["doBroadcastAndWait", ["concatenate:with:", "r", ["readVariable", "Current_row"]]],
						["changeVar:by:", "Current_column", ["stringLength:", ["readVariable", "Character"]]]]],
				[10,
					686,
					[["procDef", "~head %s", ["s"], [""], true],
						["setVar:to:", "~string", ""],
						["setVar:to:", "~index", "1"],
						["doRepeat",
							["-", ["stringLength:", ["getParam", "s", "r"]], 1],
							[["setVar:to:",
									"~string",
									["concatenate:with:", ["readVariable", "~string"], ["letter:of:", ["readVariable", "~index"], ["getParam", "s", "r"]]]],
								["changeVar:by:", "~index", 1]]],
						["setVar:to:", "Current_column", ["stringLength:", ["readVariable", "~string"]]]]],
				[10,
					965,
					[["whenIReceive", "cls"],
						["setVar:to:", "row0", ""],
						["hideVariable:", "row0"],
						["setVar:to:", "row1", ""],
						["hideVariable:", "row1"],
						["setVar:to:", "row2", ""],
						["hideVariable:", "row2"],
						["setVar:to:", "row3", ""],
						["hideVariable:", "row3"],
						["setVar:to:", "row4", ""],
						["hideVariable:", "row4"],
						["setVar:to:", "row5", ""],
						["hideVariable:", "row5"],
						["setVar:to:", "row6", ""],
						["hideVariable:", "row6"],
						["setVar:to:", "row7", ""],
						["hideVariable:", "row7"],
						["setVar:to:", "row8", ""],
						["hideVariable:", "row8"],
						["setVar:to:", "row9", ""],
						["hideVariable:", "row9"],
						["setVar:to:", "row10", ""],
						["hideVariable:", "row10"],
						["setVar:to:", "row11", ""],
						["hideVariable:", "row11"],
						["setVar:to:", "row12", ""],
						["hideVariable:", "row12"],
						["setVar:to:", "row13", ""],
						["hideVariable:", "row13"],
						["setVar:to:", "row14", ""],
						["hideVariable:", "row14"],
						["setVar:to:", "row15", ""],
						["hideVariable:", "row15"],
						["setVar:to:", "row16", ""],
						["hideVariable:", "row16"],
						["setVar:to:", "row17", ""],
						["hideVariable:", "row17"],
						["setVar:to:", "Current_row", "0"],
						["setVar:to:", "Current_column", "0"]]],
				[10,
					1845,
					[["whenIReceive", "scroll"],
						["setVar:to:", "row0", ["readVariable", "row1"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row0"]], "0"],
							[["hideVariable:", "row0"]],
							[["showVariable:", "row0"]]],
						["setVar:to:", "row1", ["readVariable", "row2"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row1"]], "0"],
							[["hideVariable:", "row1"]],
							[["showVariable:", "row1"]]],
						["setVar:to:", "row2", ["readVariable", "row3"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row2"]], "0"],
							[["hideVariable:", "row2"]],
							[["showVariable:", "row2"]]],
						["setVar:to:", "row3", ["readVariable", "row4"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row3"]], "0"],
							[["hideVariable:", "row3"]],
							[["showVariable:", "row3"]]],
						["setVar:to:", "row4", ["readVariable", "row5"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row4"]], "0"],
							[["hideVariable:", "row4"]],
							[["showVariable:", "row4"]]],
						["setVar:to:", "row5", ["readVariable", "row6"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row5"]], "0"],
							[["hideVariable:", "row5"]],
							[["showVariable:", "row5"]]],
						["setVar:to:", "row6", ["readVariable", "row7"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row6"]], "0"],
							[["hideVariable:", "row6"]],
							[["showVariable:", "row6"]]],
						["setVar:to:", "row7", ["readVariable", "row8"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row7"]], "0"],
							[["hideVariable:", "row7"]],
							[["showVariable:", "row7"]]],
						["setVar:to:", "row8", ["readVariable", "row9"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row8"]], "0"],
							[["hideVariable:", "row8"]],
							[["showVariable:", "row8"]]],
						["setVar:to:", "row9", ["readVariable", "row10"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row9"]], "0"],
							[["hideVariable:", "row9"]],
							[["showVariable:", "row9"]]],
						["setVar:to:", "row10", ["readVariable", "row11"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row10"]], "0"],
							[["hideVariable:", "row10"]],
							[["showVariable:", "row10"]]],
						["setVar:to:", "row11", ["readVariable", "row12"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row11"]], "0"],
							[["hideVariable:", "row11"]],
							[["showVariable:", "row11"]]],
						["setVar:to:", "row12", ["readVariable", "row13"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row12"]], "0"],
							[["hideVariable:", "row12"]],
							[["showVariable:", "row12"]]],
						["setVar:to:", "row13", ["readVariable", "row14"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row13"]], "0"],
							[["hideVariable:", "row13"]],
							[["showVariable:", "row13"]]],
						["setVar:to:", "row14", ["readVariable", "row15"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row14"]], "0"],
							[["hideVariable:", "row14"]],
							[["showVariable:", "row14"]]],
						["setVar:to:", "row15", ["readVariable", "row16"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row15"]], "0"],
							[["hideVariable:", "row15"]],
							[["showVariable:", "row15"]]],
						["setVar:to:", "row16", ["readVariable", "row17"]],
						["doIfElse",
							["=", ["stringLength:", ["readVariable", "row16"]], "0"],
							[["hideVariable:", "row16"]],
							[["showVariable:", "row16"]]],
						["setVar:to:", "row17", ""],
						["hideVariable:", "row17"],
						["setVar:to:", "Current_column", "0"],
						["setVar:to:", "Current_row", "17"]]],
				[10,
					4323,
					[["whenIReceive", "r0"],
						["setVar:to:", "row0", ["concatenate:with:", ["readVariable", "row0"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row0"]], "1"], [["showVariable:", "row0"]]]]],
				[10,
					4469,
					[["whenIReceive", "r1"],
						["setVar:to:", "row1", ["concatenate:with:", ["readVariable", "row1"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row1"]], "1"], [["showVariable:", "row1"]]]]],
				[10,
					4615,
					[["whenIReceive", "r2"],
						["setVar:to:", "row2", ["concatenate:with:", ["readVariable", "row2"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row2"]], "1"], [["showVariable:", "row2"]]]]],
				[10,
					4761,
					[["whenIReceive", "r3"],
						["setVar:to:", "row3", ["concatenate:with:", ["readVariable", "row3"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row3"]], "1"], [["showVariable:", "row3"]]]]],
				[10,
					4907,
					[["whenIReceive", "r4"],
						["setVar:to:", "row4", ["concatenate:with:", ["readVariable", "row4"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row4"]], "1"], [["showVariable:", "row4"]]]]],
				[10,
					5053,
					[["whenIReceive", "r5"],
						["setVar:to:", "row5", ["concatenate:with:", ["readVariable", "row5"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row5"]], "1"], [["showVariable:", "row5"]]]]],
				[10,
					5199,
					[["whenIReceive", "r6"],
						["setVar:to:", "row6", ["concatenate:with:", ["readVariable", "row6"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row6"]], "1"], [["showVariable:", "row6"]]]]],
				[10,
					5345,
					[["whenIReceive", "r7"],
						["setVar:to:", "row7", ["concatenate:with:", ["readVariable", "row7"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row7"]], "1"], [["showVariable:", "row7"]]]]],
				[10,
					5491,
					[["whenIReceive", "r8"],
						["setVar:to:", "row8", ["concatenate:with:", ["readVariable", "row8"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row8"]], "1"], [["showVariable:", "row8"]]]]],
				[10,
					5637,
					[["whenIReceive", "r9"],
						["setVar:to:", "row9", ["concatenate:with:", ["readVariable", "row9"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row9"]], "1"], [["showVariable:", "row9"]]]]],
				[10,
					5783,
					[["whenIReceive", "r10"],
						["setVar:to:", "row10", ["concatenate:with:", ["readVariable", "row10"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row10"]], "1"], [["showVariable:", "row10"]]]]],
				[10,
					5929,
					[["whenIReceive", "r11"],
						["setVar:to:", "row11", ["concatenate:with:", ["readVariable", "row11"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row11"]], "1"], [["showVariable:", "row11"]]]]],
				[10,
					6075,
					[["whenIReceive", "r12"],
						["setVar:to:", "row12", ["concatenate:with:", ["readVariable", "row12"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row12"]], "1"], [["showVariable:", "row12"]]]]],
				[10,
					6221,
					[["whenIReceive", "r13"],
						["setVar:to:", "row13", ["concatenate:with:", ["readVariable", "row13"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row13"]], "1"], [["showVariable:", "row13"]]]]],
				[10,
					6367,
					[["whenIReceive", "r14"],
						["setVar:to:", "row14", ["concatenate:with:", ["readVariable", "row14"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row14"]], "1"], [["showVariable:", "row14"]]]]],
				[10,
					6513,
					[["whenIReceive", "r15"],
						["setVar:to:", "row15", ["concatenate:with:", ["readVariable", "row15"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row15"]], "1"], [["showVariable:", "row15"]]]]],
				[10,
					6659,
					[["whenIReceive", "r16"],
						["setVar:to:", "row16", ["concatenate:with:", ["readVariable", "row16"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row16"]], "1"], [["showVariable:", "row16"]]]]],
				[10,
					6805,
					[["whenIReceive", "r17"],
						["setVar:to:", "row17", ["concatenate:with:", ["readVariable", "row17"], ["readVariable", "Character"]]],
						["doIf", ["=", ["stringLength:", ["readVariable", "row17"]], "1"], [["showVariable:", "row17"]]]]],
				[10,
					6951,
					[["whenIReceive", "bs0"],
						["call", "~head %s", ["readVariable", "row0"]],
						["setVar:to:", "row0", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row0"]]]]],
				[10,
					7119,
					[["whenIReceive", "bs1"],
						["call", "~head %s", ["readVariable", "row1"]],
						["setVar:to:", "row1", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row1"]]]]],
				[10,
					7287,
					[["whenIReceive", "bs2"],
						["call", "~head %s", ["readVariable", "row2"]],
						["setVar:to:", "row2", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row2"]]]]],
				[10,
					7455,
					[["whenIReceive", "bs3"],
						["call", "~head %s", ["readVariable", "row3"]],
						["setVar:to:", "row3", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row3"]]]]],
				[10,
					7623,
					[["whenIReceive", "bs4"],
						["call", "~head %s", ["readVariable", "row4"]],
						["setVar:to:", "row4", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row4"]]]]],
				[10,
					7791,
					[["whenIReceive", "bs5"],
						["call", "~head %s", ["readVariable", "row5"]],
						["setVar:to:", "row5", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row5"]]]]],
				[10,
					7959,
					[["whenIReceive", "bs6"],
						["call", "~head %s", ["readVariable", "row6"]],
						["setVar:to:", "row6", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row6"]]]]],
				[10,
					8127,
					[["whenIReceive", "bs7"],
						["call", "~head %s", ["readVariable", "row7"]],
						["setVar:to:", "row7", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row7"]]]]],
				[10,
					8295,
					[["whenIReceive", "bs8"],
						["call", "~head %s", ["readVariable", "row8"]],
						["setVar:to:", "row8", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row8"]]]]],
				[10,
					8463,
					[["whenIReceive", "bs9"],
						["call", "~head %s", ["readVariable", "row9"]],
						["setVar:to:", "row9", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row9"]]]]],
				[10,
					8631,
					[["whenIReceive", "bs10"],
						["call", "~head %s", ["readVariable", "row10"]],
						["setVar:to:", "row10", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row10"]]]]],
				[10,
					8799,
					[["whenIReceive", "bs11"],
						["call", "~head %s", ["readVariable", "row11"]],
						["setVar:to:", "row11", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row11"]]]]],
				[10,
					8967,
					[["whenIReceive", "bs12"],
						["call", "~head %s", ["readVariable", "row12"]],
						["setVar:to:", "row12", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row12"]]]]],
				[10,
					9135,
					[["whenIReceive", "bs13"],
						["call", "~head %s", ["readVariable", "row13"]],
						["setVar:to:", "row13", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row13"]]]]],
				[10,
					9303,
					[["whenIReceive", "bs14"],
						["call", "~head %s", ["readVariable", "row14"]],
						["setVar:to:", "row14", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row14"]]]]],
				[10,
					9471,
					[["whenIReceive", "bs15"],
						["call", "~head %s", ["readVariable", "row15"]],
						["setVar:to:", "row15", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row15"]]]]],
				[10,
					9639,
					[["whenIReceive", "bs16"],
						["call", "~head %s", ["readVariable", "row16"]],
						["setVar:to:", "row16", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row16"]]]]],
				[10,
					9807,
					[["whenIReceive", "bs17"],
						["call", "~head %s", ["readVariable", "row17"]],
						["setVar:to:", "row17", ["readVariable", "~string"]],
						["doIf", ["=", ["stringLength:", ["readVariable", "~string"]], "0"], [["hideVariable:", "row17"]]]]]],
			"costumes": [{
					"costumeName": "laptop",
					"baseLayerID": 1,
					"baseLayerMD5": "922bcc62bd0a2d066ca0d21716283843.svg",
					"bitmapResolution": 1,
					"rotationCenterX": 55,
					"rotationCenterY": 39
				}],
			"currentCostumeIndex": 0,
			"scratchX": 0,
			"scratchY": 0,
			"scale": 1,
			"direction": 90,
			"rotationStyle": "normal",
			"isDraggable": false,
			"indexInLibrary": 3,
			"visible": false,
			"spriteInfo": {
			}
		},
		{
			"objName": "Thread",
			"variables": [{
					"name": "idx",
					"value": 37,
					"isPersistent": false
				},
				{
					"name": "ilength",
					"value": 562,
					"isPersistent": false
				},
				{
					"name": "j",
					"value": 0,
					"isPersistent": false
				},
				{
					"name": "popped2",
					"value": "0.25",
					"isPersistent": false
				},
				{
					"name": "ackumulator",
					"value": "TASK2",
					"isPersistent": false
				},
				{
					"name": "token",
					"value": "1",
					"isPersistent": false
				},
				{
					"name": "character",
					"value": "2",
					"isPersistent": false
				},
				{
					"name": "ip",
					"value": 25,
					"isPersistent": false
				},
				{
					"name": "ip_repl",
					"value": 27,
					"isPersistent": false
				},
				{
					"name": "ip_delete",
					"value": "0",
					"isPersistent": false
				},
				{
					"name": "ip_save",
					"value": 24,
					"isPersistent": false
				},
				{
					"name": "does_from",
					"value": 554,
					"isPersistent": false
				},
				{
					"name": "code",
					"value": "FORGET",
					"isPersistent": false
				},
				{
					"name": "here",
					"value": 0,
					"isPersistent": false
				},
				{
					"name": "next_code",
					"value": "TASK2",
					"isPersistent": false
				},
				{
					"name": "next_code_repl",
					"value": "TASK2",
					"isPersistent": false
				},
				{
					"name": "in_definition",
					"value": "0",
					"isPersistent": false
				},
				{
					"name": "found",
					"value": "1",
					"isPersistent": false
				},
				{
					"name": "done",
					"value": "1",
					"isPersistent": false
				},
				{
					"name": "error",
					"value": "0",
					"isPersistent": false
				},
				{
					"name": "str",
					"value": " ",
					"isPersistent": false
				},
				{
					"name": "example",
					"value": 11,
					"isPersistent": false
				},
				{
					"name": "_instrument",
					"value": "5",
					"isPersistent": false
				}],
			"lists": [{
					"listName": "data",
					"contents": [],
					"isPersistent": false,
					"x": 363,
					"y": 65,
					"width": 110,
					"height": 257,
					"visible": true
				},
				{
					"listName": "return",
					"contents": [],
					"isPersistent": false,
					"x": 241,
					"y": 66,
					"width": 112,
					"height": 257,
					"visible": true
				},
				{
					"listName": "tokens",
					"contents": [":",
						"PENTAGRAM",
						"0x00ff0000",
						"COLOR",
						"!",
						"5",
						"0",
						"-200",
						"MOVE",
						"DOWN",
						"DO",
						"200",
						"MOVE",
						"144",
						"DIR",
						"+!",
						"I",
						"1+",
						"0.25",
						"DRUM",
						"LOOP",
						"UP",
						";",
						"PENTAGRAM",
						"FORGET",
						"TASK2"],
					"isPersistent": false,
					"x": 0,
					"y": 0,
					"width": 240,
					"height": 340,
					"visible": false
				}],
			"scripts": [[10, 258, [["whenIReceive", "INIT"], ["call", "INIT"]]],
				[10,
					324,
					[["procDef", "INIT", [], [], false],
						["setVar:to:", "TRUE", ["not", false]],
						["setVar:to:", "FALSE", ["not", ["not", false]]],
						["setVar:to:", "Running", ["readVariable", "TRUE"]],
						["doBroadcastAndWait", "initScreen"],
						["doBroadcastAndWait", "initKeyboard"],
						["hide"],
						["setGraphicEffect:to:", "color", 0],
						["putPenUp"],
						["penColor:",
							["+",
								["+",
									["+",
										["*", ["*", ["*", 256, 256], 256], 128],
										["*", ["*", 256, 256], 100]],
									["*", 256, 255]],
								200]],
						["penSize:", 3],
						["setPenShadeTo:", 50],
						["gotoX:y:", 0, 0],
						["heading:", 90],
						["deleteLine:ofList:", "all", "History"],
						["call", "clear_stacks"],
						["deleteLine:ofList:", "all", "tokens"],
						["setVar:to:", "CP437", "☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼"],
						["setVar:to:", "ASCII", " !\"#$%&'()*+,-.\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂"],
						["setVar:to:", "BOX_ELEMENTS", "▀▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▐░▒▓▔▕▖▗▘▙▚▛▜▝▞▟"],
						["setVar:to:", "BOX_DRAWING", "─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍╎╏═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳╴╵╶╷╸╹╺╻╼╽╾╿"],
						["setVar:to:",
							"CHARACTERS",
							["concatenate:with:",
								["concatenate:with:", ["concatenate:with:", ["readVariable", "CP437"], ["readVariable", "ASCII"]], ["readVariable", "BOX_ELEMENTS"]],
								["readVariable", "BOX_DRAWING"]]],
						["call", "make_built_in"],
						["call", "make_immediates"],
						["call", "make_terminated"],
						["deleteLine:ofList:", "all", "Words"],
						["deleteLine:ofList:", "all", "Word_code"],
						["deleteLine:ofList:", "all", "Codes"],
						["call", "run_defs"],
						["clearPenTrails"],
						["call", "PAGE"],
						["setVar:to:", "error", "0"],
						["setVar:to:", "ip_delete", "0"],
						["setVar:to:", "in_definition", "0"],
						["setVar:to:", "TermInpBuf", ""],
						["broadcast:", "bell"],
						["setVar:to:", "Running", ["readVariable", "FALSE"]]]],
				[10, 1249, [["procDef", "run_examples", [], [], false], ["doBroadcastAndWait", "run_examples"]]],
				[10,
					1341,
					[["procDef", "run_example %n", ["ex"], [0], false],
						["setVar:to:", "Number", ["getParam", "ex", "r"]],
						["doBroadcastAndWait", "run_example"]]],
				[10, 1476, [["procDef", "run_defs", [], [], false], ["doBroadcastAndWait", "run_defs"]]],
				[10,
					1568,
					[["whenIReceive", "break"],
						["setVar:to:", "error", "-100"],
						["setVar:to:", "ip", ["\/", 1, 0]],
						["doBroadcastAndWait", "print_response"],
						["setVar:to:", "TermInpBuf", ""],
						["stopScripts", "all"]]],
				[10,
					1725,
					[["whenIReceive", "print_response"],
						["doIfElse",
							["=", ["readVariable", "error"], "0"],
							[["call", "println %s", "OK"]],
							[["doIfElse",
									["=", ["readVariable", "error"], "-56"],
									[["call", "println %s", ""]],
									[["call", "println %s", ["concatenate:with:", ["readVariable", "code"], ["concatenate:with:", "? MSG # ", ["readVariable", "error"]]]]]],
								["setVar:to:", "error", "0"]]],
						["setVar:to:", "Running", ["readVariable", "FALSE"]]]],
				[10,
					2023,
					[["whenIReceive", "evaluate_buffer"],
						["setVar:to:", "Running", ["readVariable", "TRUE"]],
						["setVar:to:", "Inkey", ""],
						["call", "tokenize"],
						["call", "run_tokens"]]],
				[10,
					2159,
					[["procDef", "tokenize", [], [], true],
						["setVar:to:", "ackumulator", ""],
						["deleteLine:ofList:", "all", "tokens"],
						["setVar:to:", "token", "0"],
						["setVar:to:", "idx", "1"],
						["doUntil",
							[">", ["readVariable", "idx"], ["stringLength:", ["readVariable", "TermInpBuf"]]],
							[["setVar:to:", "character", ["letter:of:", ["readVariable", "idx"], ["readVariable", "TermInpBuf"]]],
								["doIf",
									["&",
										["=", ["readVariable", "token"], "0"],
										["not", ["<", ["readVariable", "character"], "!"]]],
									[["setVar:to:", "token", "1"]]],
								["doIf",
									["&", ["=", ["readVariable", "token"], "1"], ["<", ["readVariable", "character"], "!"]],
									[["setVar:to:", "token", "0"],
										["append:toList:", ["readVariable", "ackumulator"], "tokens"],
										["doIf",
											["&",
												["not", ["=", ["letter:of:", 1, ["readVariable", "ackumulator"]], "\""]],
												["list:contains:", "Terminated", ["letter:of:", ["stringLength:", ["readVariable", "ackumulator"]], ["readVariable", "ackumulator"]]]],
											[["call", "join_to_terminator"], ["append:toList:", ["readVariable", "ackumulator"], "tokens"]]],
										["setVar:to:", "ackumulator", ""]]],
								["doIf",
									["=", ["readVariable", "token"], "1"],
									[["setVar:to:", "ackumulator", ["concatenate:with:", ["readVariable", "ackumulator"], ["readVariable", "character"]]]]],
								["changeVar:by:", "idx", 1]]],
						["doIf",
							[">", ["stringLength:", ["readVariable", "ackumulator"]], "0"],
							[["append:toList:", ["readVariable", "ackumulator"], "tokens"]]]]],
				[10,
					2878,
					[["procDef", "join_to_terminator", [], [], true],
						["setVar:to:", "ackumulator", ["letter:of:", ["stringLength:", ["readVariable", "ackumulator"]], ["readVariable", "ackumulator"]]],
						["setVar:to:", "j", "1"],
						["doUntil",
							[">", ["readVariable", "j"], ["lineCountOfList:", "Terminated"]],
							[["doIf",
									["=", ["readVariable", "ackumulator"], ["getLine:ofList:", ["readVariable", "j"], "Terminated"]],
									[["setVar:to:", "ackumulator", ""],
										["changeVar:by:", "idx", 1],
										["setVar:to:", "character", ["letter:of:", ["readVariable", "idx"], ["readVariable", "TermInpBuf"]]],
										["doUntil",
											["|",
												["=", ["readVariable", "character"], ["getLine:ofList:", ["readVariable", "j"], "Terminator"]],
												[">", ["readVariable", "idx"], ["stringLength:", ["readVariable", "TermInpBuf"]]]],
											[["setVar:to:", "ackumulator", ["concatenate:with:", ["readVariable", "ackumulator"], ["readVariable", "character"]]],
												["changeVar:by:", "idx", 1],
												["setVar:to:", "character", ["letter:of:", ["readVariable", "idx"], ["readVariable", "TermInpBuf"]]]]],
										["setVar:to:", "j", ["\/", 1, 0]]]],
								["changeVar:by:", "j", 1]]]]],
				[10,
					3359,
					[["procDef", "run_tokens", [], [], false],
						["setVar:to:", "error", "0"],
						["setVar:to:", "ip_repl", "1"],
						["doUntil",
							[">", ["readVariable", "ip_repl"], ["lineCountOfList:", "tokens"]],
							[["setVar:to:", "code", ["getLine:ofList:", ["readVariable", "ip_repl"], "tokens"]],
								["setVar:to:", "next_code_repl", ["getLine:ofList:", ["+", ["readVariable", "ip_repl"], 1], "tokens"]],
								["doIfElse",
									["list:contains:", "Words", ["readVariable", "code"]],
									[["setVar:to:", "ip", ["readVariable", "ip_repl"]], ["call", "execute_word %s", ["readVariable", "code"]]],
									[["setVar:to:", "next_code", ["readVariable", "next_code_repl"]],
										["call", "do_built_in_repl"],
										["doIf", [">", ["readVariable", "ip_delete"], "0"], [["call", "delete_codes"]]]]],
								["changeVar:by:", "ip_repl", 1]]]]],
				[10,
					3837,
					[["procDef", "delete_codes", [], [], true],
						["doRepeat",
							["+", ["-", ["lineCountOfList:", "Codes"], ["readVariable", "ip_delete"]], 1],
							[["deleteLine:ofList:", "last", "Codes"]]],
						["setVar:to:", "ip_delete", "0"]]],
				[10,
					4000,
					[["procDef", "do_built_in_repl", [], [], false],
						["setVar:to:", "error", "0"],
						["setVar:to:", "ip", ["readVariable", "ip_repl"]],
						["doIfElse",
							["list:contains:", "Built_in", ["readVariable", "code"]],
							[["doBroadcastAndWait", ["concatenate:with:", "rt", ["readVariable", "code"]]]],
							[["doIfElse",
									["|",
										["=", ["\/", ["readVariable", "code"], ["readVariable", "code"]], "1"],
										["=", ["readVariable", "code"], "0"]],
									[["call", "PUSH %n", ["readVariable", "code"]]],
									[["setVar:to:", "error", "-13"],
										["call", "clear_stacks"],
										["setVar:to:", "ip_repl", ["\/", 1, 0]]]]]]]],
				[10,
					4381,
					[["procDef", "do_built_in", [], [], false],
						["setVar:to:", "error", "0"],
						["doIfElse",
							["&",
								["=", ["letter:of:", 1, ["readVariable", "code"]], "c"],
								["=", ["letter:of:", 2, ["readVariable", "code"]], "t"]],
							[["doBroadcastAndWait", ["readVariable", "code"]]],
							[["doIfElse",
									["list:contains:", "Built_in", ["readVariable", "code"]],
									[["doBroadcastAndWait", ["concatenate:with:", "rt", ["readVariable", "code"]]]],
									[["doIfElse",
											["|",
												["=", ["\/", ["readVariable", "code"], ["readVariable", "code"]], "1"],
												["=", ["readVariable", "code"], "0"]],
											[["call", "PUSH %n", ["readVariable", "code"]]],
											[["setVar:to:", "error", "-13"],
												["call", "clear_stacks"],
												["setVar:to:", "ip", ["\/", 1, 0]]]]]]]]]],
				[10,
					4835,
					[["procDef", "make_word", [], [], false],
						["doIf",
							["=", ["readVariable", "in_definition"], "0"],
							[["setVar:to:", "in_definition", "1"], ["call", "begin_definition"], ["changeVar:by:", "ip_repl", 1]]],
						["setVar:to:", "error", "0"],
						["doUntil",
							["|",
								["|",
									["=", ["getLine:ofList:", ["readVariable", "ip_repl"], "tokens"], ";"],
									[">", ["readVariable", "error"], "0"]],
								[">", ["readVariable", "ip_repl"], ["lineCountOfList:", "tokens"]]],
							[["setVar:to:", "code", ["getLine:ofList:", ["readVariable", "ip_repl"], "tokens"]],
								["doIfElse",
									["list:contains:", "Immediates", ["readVariable", "code"]],
									[["setVar:to:", "next_code_repl", ["getLine:ofList:", ["+", ["readVariable", "ip_repl"], 1], "tokens"]],
										["doIfElse",
											["list:contains:", "Built_in", ["readVariable", "code"]],
											[["doBroadcastAndWait", ["concatenate:with:", "ct", ["readVariable", "code"]]]],
											[["setVar:to:", "ip", ["readVariable", "ip_repl"]],
												["call", "execute_word %s", ["readVariable", "code"]],
												["doIf",
													["=", ["readVariable", "ip"], ["\/", 1, 0]],
													[["setVar:to:", "ip_repl", ["\/", 1, 0]]]]]]],
									[["doIfElse",
											["|",
												["|",
													["|", ["list:contains:", "Built_in", ["readVariable", "code"]], ["list:contains:", "Words", ["readVariable", "code"]]],
													["=", ["\/", ["readVariable", "code"], ["readVariable", "code"]], "1"]],
												["=", ["readVariable", "code"], "0"]],
											[["append:toList:", ["readVariable", "code"], "Codes"]],
											[["setVar:to:", "error", "-13"],
												["call", "clear_stacks"],
												["setVar:to:", "ip_repl", ["\/", 1, 0]]]]]],
								["changeVar:by:", "ip_repl", 1]]],
						["doIf",
							["=", ["getLine:ofList:", ["readVariable", "ip_repl"], "tokens"], ";"],
							[["call", "add_exit"], ["call", "end_definition"], ["setVar:to:", "in_definition", "0"]]]]],
				[10,
					5758,
					[["procDef", "make_marker", [], [], true],
						["call", "begin_definition"],
						["setVar:to:", "error", "0"],
						["append:toList:", "FORGET", "Codes"],
						["append:toList:", ["getLine:ofList:", ["readVariable", "ip_repl"], "tokens"], "Codes"],
						["call", "add_exit"],
						["call", "end_definition"]]],
				[10,
					5968,
					[["procDef", "make_create", [], [], true],
						["call", "begin_definition"],
						["setVar:to:", "error", "0"],
						["append:toList:", ["+", ["lineCountOfList:", "Codes"], 5], "Codes"],
						["append:toList:", "ELSE", "Codes"],
						["append:toList:", "1", "Codes"],
						["setVar:to:", "does_from", ["lineCountOfList:", "Codes"]],
						["call", "add_exit"],
						["call", "end_definition"]]],
				[10,
					6226,
					[["procDef", ".COMMA.", [], [], true],
						["setVar:to:", "error", "0"],
						["call", "POP"],
						["append:toList:", ["readVariable", "Popped"], "Codes"],
						["call", "end_definition"]]],
				[10,
					6388,
					[["procDef", "make_constant", [], [], true],
						["call", "begin_definition"],
						["setVar:to:", "error", "0"],
						["call", "POP"],
						["append:toList:", ["readVariable", "Popped"], "Codes"],
						["call", "add_exit"],
						["call", "end_definition"]]],
				[10,
					6594,
					[["procDef", "begin_definition", [], [], true],
						["changeVar:by:", "ip_repl", 1],
						["append:toList:", ["getLine:ofList:", ["readVariable", "ip_repl"], "tokens"], "Words"],
						["append:toList:", ["lineCountOfList:", "Words"], "Codes"],
						["append:toList:", ["lineCountOfList:", "Codes"], "Word_code"],
						["append:toList:", "0", "Codes"],
						["setVar:to:", "ilength", ["lineCountOfList:", "Codes"]]]],
				[10,
					6816,
					[["procDef", "end_definition", [], [], true],
						["setLine:ofList:to:", ["readVariable", "ilength"], "Codes", ["-", ["lineCountOfList:", "Codes"], ["readVariable", "ilength"]]]]],
				[10, 6916, [["procDef", "add_exit", [], [], true], ["append:toList:", "EXIT", "Codes"]]],
				[10,
					7008,
					[["procDef", "execute_word %s", ["code_arg"], [""], false],
						["setVar:to:", "ip_save", ["readVariable", "ip"]],
						["call", "find_word %s %n", ["getParam", "code_arg", "r"], ["lineCountOfList:", "Words"]],
						["setVar:to:", "ip", ["+", ["getLine:ofList:", ["readVariable", "idx"], "Word_code"], 2]],
						["call", "execute_ip"]]],
				[10,
					7203,
					[["procDef", "execute_ip", [], [], false],
						["setVar:to:", "code", ["getLine:ofList:", ["readVariable", "ip"], "Codes"]],
						["setVar:to:", "done", "0"],
						["call", "rpush %n", -1],
						["doUntil",
							["=", ["readVariable", "done"], "1"],
							[["doUntil",
									["=", ["readVariable", "code"], "EXIT"],
									[["doIfElse",
											["list:contains:", "Words", ["readVariable", "code"]],
											[["call", "rpush %n", ["+", ["readVariable", "ip"], 1]],
												["call", "find_word %s %n", ["readVariable", "code"], ["lineCountOfList:", "Words"]],
												["setVar:to:", "ip", ["+", ["getLine:ofList:", ["readVariable", "idx"], "Word_code"], 2]],
												["setVar:to:", "code", ["getLine:ofList:", ["readVariable", "ip"], "Codes"]]],
											[["doIfElse",
													["=", ["readVariable", "code"], "EXECUTE"],
													[["call", "rpush %n", ["+", ["readVariable", "ip"], 1]],
														["call", "POP"],
														["setVar:to:", "ip", ["readVariable", "Popped"]],
														["setVar:to:", "code", ["getLine:ofList:", ["readVariable", "ip"], "Codes"]]],
													[["setVar:to:", "next_code", ["getLine:ofList:", ["+", ["readVariable", "ip"], 1], "Codes"]],
														["call", "do_built_in"],
														["doIfElse",
															["=", ["readVariable", "ip"], ["\/", 1, 0]],
															[["setVar:to:", "code", "EXIT"],
																["setVar:to:", "done", "1"],
																["setVar:to:", "ip_save", ["readVariable", "ip"]]],
															[["changeVar:by:", "ip", 1], ["setVar:to:", "code", ["getLine:ofList:", ["readVariable", "ip"], "Codes"]]]]]]]]]],
								["call", "rpop"],
								["doIf",
									[">", ["readVariable", "ip_delete"], "0"],
									[["call", "delete_codes"],
										["doIf",
											[">", ["readVariable", "Popped"], ["lineCountOfList:", "Codes"]],
											[["setVar:to:", "done", "1"]]]]],
								["doIfElse",
									["=", ["readVariable", "Popped"], "-1"],
									[["setVar:to:", "done", "1"]],
									[["setVar:to:", "ip", ["readVariable", "Popped"]],
										["setVar:to:", "code", ["getLine:ofList:", ["readVariable", "ip"], "Codes"]]]]]],
						["setVar:to:", "ip", ["readVariable", "ip_save"]]]],
				[10,
					8363,
					[["procDef", "find_word %s %n", ["code_arg", "index"], ["", 0], true],
						["setVar:to:", "idx", ["getParam", "index", "r"]],
						["setVar:to:", "found", "0"],
						["doUntil",
							["|", ["=", ["readVariable", "found"], "1"], ["<", ["readVariable", "idx"], "1"]],
							[["doIfElse",
									["=", ["getParam", "code_arg", "r"], ["getLine:ofList:", ["readVariable", "idx"], "Words"]],
									[["setVar:to:", "found", "1"]],
									[["changeVar:by:", "idx", -1]]]]]]],
				[10,
					8670,
					[["whenIReceive", "rtMS"],
						["call", "POP"],
						["wait:elapsed:from:", ["\/", ["readVariable", "Popped"], 1000]]]],
				[10,
					8766,
					[["whenIReceive", "rtTIMER"], ["call", "PUSH %n", ["*", 1000, ["timer"]]]]],
				[10,
					8840,
					[["whenIReceive", "rtTIME&DATE"],
						["call", "PUSH %n", ["timeAndDate", "second"]],
						["call", "PUSH %n", ["timeAndDate", "minute"]],
						["call", "PUSH %n", ["timeAndDate", "hour"]],
						["call", "PUSH %n", ["timeAndDate", "date"]],
						["call", "PUSH %n", ["timeAndDate", "month"]],
						["call", "PUSH %n", ["timeAndDate", "year"]]]],
				[10,
					9040,
					[["whenIReceive", "rtDRUM"],
						["call", "POP"],
						["setVar:to:", "popped2", ["readVariable", "Popped"]],
						["call", "POP"],
						["playDrum", ["readVariable", "Popped"], ["readVariable", "popped2"]]]],
				[10,
					9180,
					[["whenIReceive", "rtREST"], ["call", "POP"], ["rest:elapsed:from:", ["readVariable", "Popped"]]]],
				[10,
					9272,
					[["whenIReceive", "rtPLAY"],
						["call", "POP"],
						["setVar:to:", "popped2", ["readVariable", "Popped"]],
						["call", "POP"],
						["noteOn:duration:elapsed:from:", ["readVariable", "Popped"], ["readVariable", "popped2"]]]],
				[10,
					9412,
					[["whenIReceive", "uv-1!"],
						["call", "POP"],
						["instrument:", ["readVariable", "Popped"]],
						["setVar:to:", "_instrument", ["readVariable", "Popped"]]]],
				[10,
					9530,
					[["whenIReceive", "uv-2!"], ["call", "POP"], ["setTempoTo:", ["readVariable", "Popped"]]]],
				[10,
					9622,
					[["whenIReceive", "uv-2+!"], ["call", "POP"], ["changeTempoBy:", ["readVariable", "Popped"]]]],
				[10, 9714, [["whenIReceive", "uv-2@"], ["call", "PUSH %n", ["tempo"]]]],
				[10,
					9784,
					[["whenIReceive", "uv-3!"], ["call", "POP"], ["setVolumeTo:", ["readVariable", "Popped"]]]],
				[10,
					9876,
					[["whenIReceive", "uv-3+!"], ["call", "POP"], ["changeVolumeBy:", ["readVariable", "Popped"]]]],
				[10, 9968, [["whenIReceive", "uv-3@"], ["call", "PUSH %n", ["volume"]]]],
				[10,
					10038,
					[["whenIReceive", "rtGOTO-XY"],
						["call", "POP"],
						["setVar:to:", "popped2", ["readVariable", "Popped"]],
						["call", "POP"],
						["gotoX:y:", ["readVariable", "Popped"], ["readVariable", "popped2"]]]],
				[10,
					10178,
					[["whenIReceive", "uv-4!"], ["call", "POP"], ["xpos:", ["readVariable", "Popped"]]]],
				[10,
					10270,
					[["whenIReceive", "uv-4+!"], ["call", "POP"], ["changeXposBy:", ["readVariable", "Popped"]]]],
				[10, 10362, [["whenIReceive", "uv-4@"], ["call", "PUSH %n", ["xpos"]]]],
				[10,
					10432,
					[["whenIReceive", "uv-5!"], ["call", "POP"], ["ypos:", ["readVariable", "Popped"]]]],
				[10,
					10524,
					[["whenIReceive", "uv-5+!"], ["call", "POP"], ["changeYposBy:", ["readVariable", "Popped"]]]],
				[10, 10616, [["whenIReceive", "uv-5@"], ["call", "PUSH %n", ["ypos"]]]],
				[10,
					10686,
					[["whenIReceive", "rtMOVE"], ["call", "POP"], ["forward:", ["readVariable", "Popped"]]]],
				[10,
					10778,
					[["whenIReceive", "uv-6!"], ["call", "POP"], ["heading:", ["readVariable", "Popped"]]]],
				[10,
					10870,
					[["whenIReceive", "uv-6+!"], ["call", "POP"], ["turnRight:", ["readVariable", "Popped"]]]],
				[10, 10962, [["whenIReceive", "uv-6@"], ["call", "PUSH %n", ["heading"]]]],
				[10,
					11032,
					[["whenIReceive", "uv-7!"], ["call", "POP"], ["penColor:", ["readVariable", "Popped"]]]],
				[10,
					11124,
					[["whenIReceive", "uv-8!"], ["call", "POP"], ["setPenHueTo:", ["readVariable", "Popped"]]]],
				[10,
					11216,
					[["whenIReceive", "uv-8+!"], ["call", "POP"], ["changePenHueBy:", ["readVariable", "Popped"]]]],
				[10,
					11308,
					[["whenIReceive", "uv-9!"], ["call", "POP"], ["setPenShadeTo:", ["readVariable", "Popped"]]]],
				[10,
					11400,
					[["whenIReceive", "uv-9+!"], ["call", "POP"], ["changePenShadeBy:", ["readVariable", "Popped"]]]],
				[10,
					11492,
					[["whenIReceive", "uv-10!"], ["call", "POP"], ["penSize:", ["readVariable", "Popped"]]]],
				[10,
					11584,
					[["whenIReceive", "uv-10+!"], ["call", "POP"], ["changePenShadeBy:", ["readVariable", "Popped"]]]],
				[10, 11676, [["whenIReceive", "rtDOWN"], ["putPenDown"]]],
				[10, 11742, [["whenIReceive", "rtUP"], ["putPenUp"]]],
				[10, 11808, [["procDef", "PAGE", [], [], false], ["doBroadcastAndWait", "cls"]]],
				[10,
					11900,
					[["whenIReceive", "rtAT-XY"],
						["call", "POP"],
						["setVar:to:", "Current_row", ["readVariable", "Popped"]],
						["call", "POP"],
						["setVar:to:", "Current_column", ["readVariable", "Popped"]]]],
				[10,
					12040,
					[["whenIReceive", "rtPOS@"],
						["setVar:to:", "str", ["getAttribute:of:", ["concatenate:with:", "row", ["readVariable", "Current_row"]], "Screen"]],
						["call", "ascii %s", ["letter:of:", ["+", ["readVariable", "Current_column"], 1], ["readVariable", "str"]]],
						["call", "PUSH %n", ["readVariable", "idx"]]]],
				[10,
					12178,
					[["whenIReceive", "rtEMIT"],
						["call", "POP"],
						["call", "..DQ. %s", ["letter:of:", ["readVariable", "Popped"], ["readVariable", "CHARACTERS"]]]]],
				[10,
					12274,
					[["whenIReceive", "rt.\""], ["changeVar:by:", "ip", 1], ["call", "..DQ. %s", ["readVariable", "next_code"]]]],
				[10, 12366, [["whenIReceive", "ct.\""], ["call", "ct.LP."]]],
				[10,
					12432,
					[["whenIReceive", "rtSPACES"],
						["call", "POP"],
						["doRepeat", ["readVariable", "Popped"], [["call", "..DQ. %s", " "]]]]],
				[10,
					12561,
					[["whenIReceive", "rt+"],
						["call", "POP"],
						["setLine:ofList:to:", 1, "data", ["+", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]]]]],
				[10,
					12657,
					[["whenIReceive", "rt-"],
						["call", "POP"],
						["setLine:ofList:to:", 1, "data", ["-", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]]]]],
				[10,
					12753,
					[["whenIReceive", "rt*"],
						["call", "POP"],
						["setLine:ofList:to:", 1, "data", ["*", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]]]]],
				[10,
					12849,
					[["whenIReceive", "rt\/"],
						["call", "POP"],
						["setLine:ofList:to:",
							1,
							"data",
							["computeFunction:of:", "floor", ["\/", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]]]]]],
				[10,
					12949,
					[["whenIReceive", "rtF\/"],
						["call", "POP"],
						["setLine:ofList:to:", 1, "data", ["\/", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]]]]],
				[10,
					13045,
					[["whenIReceive", "rtINT"],
						["call", "POP"],
						["doIfElse",
							["<", ["readVariable", "Popped"], "0"],
							[["call", "PUSH %n", ["computeFunction:of:", "ceiling", ["readVariable", "Popped"]]]],
							[["call", "PUSH %n", ["computeFunction:of:", "floor", ["readVariable", "Popped"]]]]]]],
				[10,
					13235,
					[["whenIReceive", "rtFLOOR"],
						["call", "POP"],
						["call", "PUSH %n", ["computeFunction:of:", "floor", ["readVariable", "Popped"]]]]],
				[10,
					13331,
					[["whenIReceive", "rtFROUND"],
						["call", "POP"],
						["call", "PUSH %n", ["rounded", ["readVariable", "Popped"]]]]],
				[10,
					13427,
					[["whenIReceive", "rtMOD"],
						["call", "POP"],
						["setLine:ofList:to:", 1, "data", ["%", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]]]]],
				[10,
					13523,
					[["whenIReceive", "rt\/MOD"],
						["call", "POP"],
						["insert:at:ofList:", ["%", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]], 2, "data"],
						["setLine:ofList:to:",
							1,
							"data",
							["computeFunction:of:", "floor", ["\/", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]]]]]],
				[10,
					13653,
					[["whenIReceive", "rt*\/"],
						["call", "POP"],
						["setLine:ofList:to:",
							1,
							"data",
							["computeFunction:of:",
								"floor",
								["\/",
									["*", ["getLine:ofList:", 2, "data"], ["getLine:ofList:", 1, "data"]],
									["readVariable", "Popped"]]]],
						["deleteLine:ofList:", 2, "data"]]],
				[10,
					13779,
					[["whenIReceive", "rt*\/MOD"],
						["call", "POP"],
						["setLine:ofList:to:", 1, "data", ["*", ["getLine:ofList:", 2, "data"], ["getLine:ofList:", 1, "data"]]],
						["deleteLine:ofList:", 2, "data"],
						["call", "PUSH %n", ["%", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]]],
						["call",
							"PUSH %n",
							["computeFunction:of:", "floor", ["\/", ["getLine:ofList:", 2, "data"], ["readVariable", "Popped"]]]],
						["deleteLine:ofList:", 3, "data"]]],
				[10,
					13983,
					[["whenIReceive", "rt1+"],
						["call", "POP"],
						["changeVar:by:", "Popped", 1],
						["call", "PUSH %n", ["readVariable", "Popped"]]]],
				[10,
					14097,
					[["whenIReceive", "rt1-"],
						["call", "POP"],
						["changeVar:by:", "Popped", -1],
						["call", "PUSH %n", ["readVariable", "Popped"]]]],
				[10,
					14211,
					[["whenIReceive", "rt2+"],
						["call", "POP"],
						["changeVar:by:", "Popped", 2],
						["call", "PUSH %n", ["readVariable", "Popped"]]]],
				[10,
					14325,
					[["whenIReceive", "rt2-"],
						["call", "POP"],
						["changeVar:by:", "Popped", -2],
						["call", "PUSH %n", ["readVariable", "Popped"]]]],
				[10,
					14439,
					[["whenIReceive", "rt2*"],
						["call", "POP"],
						["changeVar:by:", "Popped", ["readVariable", "Popped"]],
						["call", "PUSH %n", ["readVariable", "Popped"]]]],
				[10,
					14557,
					[["whenIReceive", "rt2\/"],
						["call", "POP"],
						["setVar:to:", "Popped", ["computeFunction:of:", "floor", ["\/", ["readVariable", "Popped"], 2]]],
						["call", "PUSH %n", ["readVariable", "Popped"]]]],
				[10,
					14683,
					[["whenIReceive", "rt."],
						["call", "POP"],
						["call", "..DQ. %s", ["concatenate:with:", ["readVariable", "Popped"], " "]]]],
				[10,
					14779,
					[["whenIReceive", "rt.R"],
						["call", "POP"],
						["setVar:to:", "popped2", ["readVariable", "Popped"]],
						["call", "POP"],
						["setVar:to:", "str", ""],
						["doRepeat",
							["-", ["readVariable", "popped2"], ["stringLength:", ["readVariable", "Popped"]]],
							[["setVar:to:", "str", ["concatenate:with:", ["readVariable", "str"], " "]]]],
						["call", "..DQ. %s", ["concatenate:with:", ["readVariable", "str"], ["readVariable", "Popped"]]]]],
				[10,
					15024,
					[["whenIReceive", "rt.S"],
						["setVar:to:", "j", ["lineCountOfList:", "data"]],
						["call", "..DQ. %s", ["concatenate:with:", ["concatenate:with:", "<", ["readVariable", "j"]], "> "]],
						["doRepeat",
							["readVariable", "j"],
							[["call", "..DQ. %s", ["concatenate:with:", ["getLine:ofList:", ["readVariable", "j"], "data"], " "]],
								["changeVar:by:", "j", -1]]]]],
				[10,
					15225,
					[["whenIReceive", "rtR.S"],
						["setVar:to:", "j", ["lineCountOfList:", "return"]],
						["call", "..DQ. %s", ["concatenate:with:", ["concatenate:with:", "<", ["readVariable", "j"]], "> "]],
						["doRepeat",
							["readVariable", "j"],
							[["call", "..DQ. %s", ["concatenate:with:", ["getLine:ofList:", ["readVariable", "j"], "return"], " "]],
								["changeVar:by:", "j", -1]]]]],
				[10, 15426, [["whenIReceive", "rt("], ["changeVar:by:", "ip", 1]]],
				[10, 15492, [["whenIReceive", "ct("], ["call", "ct.LP."]]],
				[10,
					15558,
					[["procDef", "ct.LP.", [], [], true],
						["append:toList:", ["readVariable", "code"], "Codes"],
						["append:toList:", ["readVariable", "next_code_repl"], "Codes"],
						["changeVar:by:", "ip_repl", 1],
						["setVar:to:", "next_code_repl", ["getLine:ofList:", ["+", ["readVariable", "ip_repl"], 1], "tokens"]]]],
				[10,
					15736,
					[["whenIReceive", "ctPOSTPONE"],
						["append:toList:", ["concatenate:with:", "ct", ["readVariable", "next_code_repl"]], "Codes"],
						["changeVar:by:", "ip_repl", 1],
						["setVar:to:", "next_code_repl", ["getLine:ofList:", ["readVariable", "ip_repl"], "tokens"]]]],
				[10, 15862, [["whenIReceive", "rtDROP"], ["call", "DROP"]]],
				[10, 15928, [["whenIReceive", "rt2DROP"], ["call", "_2DROP"]]],
				[10,
					15994,
					[["procDef", "_2DROP", [], [], true], ["call", "DROP"], ["call", "DROP"]]],
				[10, 16108, [["whenIReceive", "rtDUP"], ["call", "DUP"]]],
				[10,
					16174,
					[["procDef", "DUP", [], [], true], ["call", "PUSH %n", ["getLine:ofList:", 1, "data"]]]],
				[10, 16270, [["whenIReceive", "rt2DUP"], ["call", "_2DUP"]]],
				[10,
					16336,
					[["procDef", "_2DUP", [], [], true],
						["call", "PUSH %n", ["getLine:ofList:", 2, "data"]],
						["call", "PUSH %n", ["getLine:ofList:", 2, "data"]]]],
				[10, 16458, [["whenIReceive", "rtSWAP"], ["call", "SWAP"]]],
				[10,
					16524,
					[["procDef", "SWAP", [], [], true],
						["call", "POP"],
						["insert:at:ofList:", ["readVariable", "Popped"], 2, "data"]]],
				[10,
					16642,
					[["whenIReceive", "rt2SWAP"],
						["insert:at:ofList:", ["getLine:ofList:", 1, "data"], 5, "data"],
						["insert:at:ofList:", ["getLine:ofList:", 2, "data"], 6, "data"],
						["call", "DROP"],
						["call", "DROP"]]],
				[10,
					16782,
					[["whenIReceive", "rtROT"],
						["call", "PUSH %n", ["getLine:ofList:", 3, "data"]],
						["deleteLine:ofList:", 4, "data"]]],
				[10,
					16874,
					[["whenIReceive", "rt2ROT"],
						["call", "PUSH %n", ["getLine:ofList:", 6, "data"]],
						["call", "PUSH %n", ["getLine:ofList:", 6, "data"]],
						["deleteLine:ofList:", 7, "data"],
						["deleteLine:ofList:", 7, "data"]]],
				[10, 17014, [["whenIReceive", "rtOVER"], ["call", "PUSH %n", ["getLine:ofList:", 2, "data"]]]],
				[10,
					17084,
					[["whenIReceive", "rt2OVER"],
						["call", "PUSH %n", ["getLine:ofList:", 4, "data"]],
						["call", "PUSH %n", ["getLine:ofList:", 4, "data"]]]],
				[10,
					17180,
					[["whenIReceive", "rtABS"],
						["setLine:ofList:to:", 1, "data", ["computeFunction:of:", "abs", ["getLine:ofList:", 1, "data"]]]]],
				[10,
					17254,
					[["whenIReceive", "rtNEGATE"],
						["setLine:ofList:to:", 1, "data", ["-", 0, ["getLine:ofList:", 1, "data"]]]]],
				[10,
					17328,
					[["whenIReceive", "rtMIN"],
						["call", "POP"],
						["doIf",
							["<", ["readVariable", "Popped"], ["getLine:ofList:", 1, "data"]],
							[["setLine:ofList:to:", 1, "data", ["readVariable", "Popped"]]]]]],
				[10,
					17466,
					[["whenIReceive", "rtMAX"],
						["call", "POP"],
						["doIf",
							[">", ["readVariable", "Popped"], ["getLine:ofList:", 1, "data"]],
							[["setLine:ofList:to:", 1, "data", ["readVariable", "Popped"]]]]]],
				[10,
					17604,
					[["whenIReceive", "rt>R"], ["call", "POP"], ["call", "rpush %n", ["readVariable", "Popped"]]]],
				[10,
					17696,
					[["whenIReceive", "rtR>"], ["call", "rpop"], ["call", "PUSH %n", ["readVariable", "Popped"]]]],
				[10, 17788, [["whenIReceive", "rtI"], ["call", "PUSH %n", ["getLine:ofList:", 1, "return"]]]],
				[10, 17858, [["whenIReceive", "rtI'"], ["call", "PUSH %n", ["getLine:ofList:", 2, "return"]]]],
				[10, 17928, [["whenIReceive", "rtJ"], ["call", "PUSH %n", ["getLine:ofList:", 3, "return"]]]],
				[10, 17998, [["whenIReceive", "rtK"], ["call", "PUSH %n", ["getLine:ofList:", 5, "return"]]]],
				[10, 18068, [["whenIReceive", "rt:"], ["call", "make_word"]]],
				[10, 18134, [["whenIReceive", "rtMARKER"], ["call", "make_marker"]]],
				[10, 18200, [["whenIReceive", "rtCREATE"], ["call", "make_create"]]],
				[10,
					18266,
					[["whenIReceive", "rtDOES>"],
						["setLine:ofList:to:",
							["readVariable", "does_from"],
							"Codes",
							["-", ["+", ["readVariable", "ip"], 1], ["readVariable", "does_from"]]],
						["setVar:to:", "ip", ["\/", 1, 0]]]],
				[10, 18370, [["whenIReceive", "rt,"], ["call", ".COMMA."]]],
				[10,
					18436,
					[["whenIReceive", "rtALLOT"],
						["call", "POP"],
						["doRepeat",
							["readVariable", "Popped"],
							[["call", "PUSH %n", ["randomFrom:to:", -32768, 32767]], ["call", ".COMMA."]]]]],
				[10,
					18591,
					[["whenIReceive", "rtVARIABLE"],
						["call", "make_create"],
						["call", "PUSH %n", ["randomFrom:to:", -32768, 32767]],
						["call", ".COMMA."]]],
				[10,
					18705,
					[["whenIReceive", "rt!"],
						["call", "POP"],
						["setVar:to:", "popped2", ["readVariable", "Popped"]],
						["doIfElse",
							["<", ["readVariable", "popped2"], "0"],
							[["doBroadcastAndWait", ["concatenate:with:", ["concatenate:with:", "uv", ["readVariable", "popped2"]], "!"]]],
							[["call", "POP"], ["setLine:ofList:to:", ["readVariable", "popped2"], "Codes", ["readVariable", "Popped"]]]]]],
				[10,
					18943,
					[["whenIReceive", "rt+!"],
						["call", "POP"],
						["setVar:to:", "popped2", ["readVariable", "Popped"]],
						["doIfElse",
							["<", ["readVariable", "popped2"], "0"],
							[["doBroadcastAndWait", ["concatenate:with:", ["concatenate:with:", "uv", ["readVariable", "popped2"]], "+!"]]],
							[["call", "POP"],
								["setLine:ofList:to:",
									["readVariable", "popped2"],
									"Codes",
									["+", ["getLine:ofList:", ["readVariable", "popped2"], "Codes"], ["readVariable", "Popped"]]]]]]],
				[10,
					19189,
					[["whenIReceive", "rt@"],
						["call", "POP"],
						["doIfElse",
							["<", ["readVariable", "Popped"], "0"],
							[["doBroadcastAndWait", ["concatenate:with:", ["concatenate:with:", "uv", ["readVariable", "Popped"]], "@"]]],
							[["call", "PUSH %n", ["getLine:ofList:", ["readVariable", "Popped"], "Codes"]]]]]],
				[10, 19383, [["whenIReceive", "rtCONSTANT"], ["call", "make_constant"]]],
				[10, 19449, [["whenIReceive", "rt="], ["call", ".EQ."]]],
				[10,
					19515,
					[["procDef", ".EQ.", [], [], true],
						["call", "POP"],
						["doIfElse",
							["=", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]],
							[["call", "DROP"], ["call", "PUSH %n", -1]],
							[["call", "DROP"], ["call", "PUSH %n", 0]]]]],
				[10,
					19759,
					[["whenIReceive", "rt<"],
						["call", "POP"],
						["doIfElse",
							["<", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]],
							[["call", "DROP"], ["call", "PUSH %n", -1]],
							[["call", "DROP"], ["call", "PUSH %n", 0]]]]],
				[10,
					19977,
					[["whenIReceive", "rt>"],
						["call", "POP"],
						["doIfElse",
							[">", ["getLine:ofList:", 1, "data"], ["readVariable", "Popped"]],
							[["call", "DROP"], ["call", "PUSH %n", -1]],
							[["call", "DROP"], ["call", "PUSH %n", 0]]]]],
				[10,
					20195,
					[["whenIReceive", "rtINVERT"],
						["call", "POP"],
						["call", "PUSH %n", ["-", -1, ["readVariable", "Popped"]]]]],
				[10, 20291, [["procDef", "FALSE", [], [], true], ["call", "PUSH %n", 0]]],
				[10, 20383, [["procDef", "TRUE", [], [], true], ["call", "PUSH %n", -1]]],
				[10,
					20475,
					[["whenIReceive", "rt0="],
						["call", "POP"],
						["doIfElse",
							["=", ["readVariable", "Popped"], "0"],
							[["call", "TRUE"]],
							[["call", "FALSE"]]]]],
				[10,
					20649,
					[["whenIReceive", "rt0<"],
						["call", "POP"],
						["doIfElse",
							["<", ["readVariable", "Popped"], "0"],
							[["call", "TRUE"]],
							[["call", "FALSE"]]]]],
				[10,
					20823,
					[["whenIReceive", "rtAND"],
						["call", "POP"],
						["doIfElse",
							["|",
								["=", ["computeFunction:of:", "abs", ["getLine:ofList:", 1, "data"]], "0"],
								["=", ["computeFunction:of:", "abs", ["readVariable", "Popped"]], "0"]],
							[["call", "DROP"], ["call", "FALSE"]],
							[["call", "DROP"], ["call", "TRUE"]]]]],
				[10,
					21050,
					[["whenIReceive", "rtOR"],
						["call", "POP"],
						["doIfElse",
							["&",
								["=", ["computeFunction:of:", "abs", ["getLine:ofList:", 1, "data"]], "0"],
								["=", ["computeFunction:of:", "abs", ["readVariable", "Popped"]], "0"]],
							[["call", "DROP"], ["call", "FALSE"]],
							[["call", "DROP"], ["call", "TRUE"]]]]],
				[10,
					21277,
					[["whenIReceive", "rtXOR"],
						["call", "POP"],
						["doIfElse",
							["=",
								["=", ["computeFunction:of:", "abs", ["getLine:ofList:", 1, "data"]], "0"],
								["=", ["computeFunction:of:", "abs", ["readVariable", "Popped"]], "0"]],
							[["call", "DROP"], ["call", "FALSE"]],
							[["call", "DROP"], ["call", "TRUE"]]]]],
				[10,
					21504,
					[["whenIReceive", "rt?DUP"],
						["doIf",
							["not", ["=", ["computeFunction:of:", "abs", ["getLine:ofList:", 1, "data"]], "0"]],
							[["call", "DUP"]]]]],
				[10,
					21625,
					[["whenIReceive", "rtABORT\""],
						["call", "POP"],
						["doIfElse",
							["not", ["=", ["computeFunction:of:", "abs", ["readVariable", "Popped"]], "0"]],
							[["call", "..DQ. %s", ["readVariable", "next_code"]],
								["setVar:to:", "error", "-2"],
								["call", "clear_stacks"],
								["setVar:to:", "ip", ["\/", 1, 0]]],
							[["changeVar:by:", "ip", 1]]]]],
				[10, 21882, [["whenIReceive", "ctABORT\""], ["call", "ct.LP."]]],
				[10,
					21948,
					[["procDef", "clear_stacks", [], [], true],
						["deleteLine:ofList:", "all", "data"],
						["deleteLine:ofList:", "all", "return"]]],
				[10,
					22062,
					[["whenIReceive", "rtQUIT"],
						["setVar:to:", "error", "-56"],
						["deleteLine:ofList:", "all", "return"],
						["setVar:to:", "ip", ["\/", 1, 0]]]],
				[10,
					22176,
					[["whenIReceive", "rt?STACK"],
						["doIfElse",
							["=", ["lineCountOfList:", "data"], "0"],
							[["call", "TRUE"]],
							[["call", "FALSE"]]]]],
				[10,
					22328,
					[["whenIReceive", "rtIF"],
						["call", "POP"],
						["doIfElse",
							["=", ["computeFunction:of:", "abs", ["readVariable", "Popped"]], "0"],
							[["changeVar:by:", "ip", ["readVariable", "next_code"]]],
							[["changeVar:by:", "ip", 1]]]]],
				[10,
					22510,
					[["whenIReceive", "ctIF"],
						["append:toList:", "IF", "Codes"],
						["append:toList:", "0", "Codes"],
						["call", "PUSH %n", ["lineCountOfList:", "Codes"]]]],
				[10, 22624, [["whenIReceive", "rtELSE"], ["changeVar:by:", "ip", ["readVariable", "next_code"]]]],
				[10,
					22694,
					[["whenIReceive", "ctELSE"],
						["call", "POP"],
						["append:toList:", "ELSE", "Codes"],
						["append:toList:", "0", "Codes"],
						["setLine:ofList:to:",
							["readVariable", "Popped"],
							"Codes",
							["+", ["-", ["lineCountOfList:", "Codes"], ["readVariable", "Popped"]], 1]],
						["call", "PUSH %n", ["lineCountOfList:", "Codes"]]]],
				[10,
					22864,
					[["whenIReceive", "ctTHEN"],
						["call", "POP"],
						["setLine:ofList:to:",
							["readVariable", "Popped"],
							"Codes",
							["+", ["-", ["lineCountOfList:", "Codes"], ["readVariable", "Popped"]], 1]]]],
				[10,
					22964,
					[["whenIReceive", "rt[CHAR]"],
						["call", "ascii %s", ["readVariable", "next_code"]],
						["call", "PUSH %n", ["readVariable", "idx"]],
						["changeVar:by:", "ip", 1]]],
				[10,
					23082,
					[["whenIReceive", "ct[CHAR]"],
						["call", "ascii %s", ["readVariable", "next_code_repl"]],
						["append:toList:", ["readVariable", "idx"], "Codes"],
						["changeVar:by:", "ip_repl", 1],
						["setVar:to:", "next_code_repl", ["getLine:ofList:", ["+", ["readVariable", "ip_repl"], 1], "tokens"]]]],
				[10,
					23234,
					[["whenIReceive", "rtINKEY"],
						["doIfElse",
							["=", ["readVariable", "Inkey"], ""],
							[["call", "PUSH %n", 0]],
							[["call", "ascii %s", ["readVariable", "Inkey"]],
								["setVar:to:", "Inkey", ""],
								["call", "PUSH %n", ["readVariable", "idx"]]]]]],
				[10,
					23438,
					[["procDef", "ascii %s", ["char"], [""], true],
						["setVar:to:", "idx", "1"],
						["doUntil",
							["|",
								["=",
									["letter:of:", ["readVariable", "idx"], ["readVariable", "CHARACTERS"]],
									["letter:of:", 1, ["getParam", "char", "r"]]],
								[">", ["readVariable", "idx"], ["stringLength:", ["readVariable", "CHARACTERS"]]]],
							[["changeVar:by:", "idx", 1]]]]],
				[10,
					23624,
					[["whenIReceive", "rtEXECUTE"],
						["setVar:to:", "ip_save", ["readVariable", "ip"]],
						["call", "POP"],
						["setVar:to:", "ip", ["readVariable", "Popped"]],
						["call", "execute_ip"]]],
				[10,
					23764,
					[["whenIReceive", "rt'"],
						["call", "find_word %s %n", ["readVariable", "next_code_repl"], ["lineCountOfList:", "Words"]],
						["call", "PUSH %n", ["+", ["getLine:ofList:", ["readVariable", "idx"], "Word_code"], 2]],
						["changeVar:by:", "ip_repl", 1],
						["setVar:to:", "next_code_repl", ["getLine:ofList:", ["+", ["readVariable", "ip_repl"], 1], "tokens"]]]],
				[10,
					23924,
					[["whenIReceive", "rt[']"],
						["call", "find_word %s %n", ["readVariable", "next_code"], ["lineCountOfList:", "Words"]],
						["call", "PUSH %n", ["+", ["getLine:ofList:", ["readVariable", "idx"], "Word_code"], 2]],
						["changeVar:by:", "ip", 1]]],
				[10, 24050, [["whenIReceive", "ct[']"], ["call", "ct.LP."]]],
				[10,
					24116,
					[["whenIReceive", "rtDO"],
						["call", "SWAP"],
						["call", "POP"],
						["call", "rpush %n", ["readVariable", "Popped"]],
						["call", "POP"],
						["call", "rpush %n", ["readVariable", "Popped"]]]],
				[10,
					24278,
					[["whenIReceive", "ctDO"],
						["append:toList:", "DO", "Codes"],
						["call", "PUSH %n", ["lineCountOfList:", "Codes"]],
						["call", "rpush %n", -1]]],
				[10,
					24392,
					[["whenIReceive", "rt?DO"],
						["call", "_2DUP"],
						["call", ".EQ."],
						["call", "POP"],
						["doIfElse",
							["=", ["readVariable", "Popped"], "0"],
							[["doBroadcastAndWait", "rtDO"], ["changeVar:by:", "ip", 1]],
							[["call", "_2DROP"], ["changeVar:by:", "ip", ["readVariable", "next_code"]]]]]],
				[10,
					24658,
					[["whenIReceive", "ct?DO"],
						["append:toList:", "?DO", "Codes"],
						["append:toList:", "0", "Codes"],
						["call", "PUSH %n", ["lineCountOfList:", "Codes"]],
						["call", "rpush %n", -1],
						["call", "rpush %n", ["lineCountOfList:", "Codes"]]]],
				[10,
					24820,
					[["whenIReceive", "rtLOOP"],
						["call", "rpop"],
						["changeVar:by:", "Popped", 1],
						["doIfElse",
							["<", ["readVariable", "Popped"], ["getLine:ofList:", 1, "return"]],
							[["call", "rpush %n", ["readVariable", "Popped"]], ["changeVar:by:", "ip", ["readVariable", "next_code"]]],
							[["call", "rpop"], ["changeVar:by:", "ip", 1]]]]],
				[10,
					25068,
					[["whenIReceive", "rt+LOOP"],
						["call", "POP"],
						["setVar:to:", "str", ["readVariable", "Popped"]],
						["call", "rpop"],
						["changeVar:by:", "Popped", ["readVariable", "str"]],
						["setVar:to:", "j", ["<", ["readVariable", "Popped"], ["getLine:ofList:", 1, "return"]]],
						["doIfElse",
							["not",
								["=",
									["<", ["readVariable", "str"], "0"],
									["=", ["readVariable", "j"], ["readVariable", "TRUE"]]]],
							[["call", "rpush %n", ["readVariable", "Popped"]], ["changeVar:by:", "ip", ["readVariable", "next_code"]]],
							[["call", "rpop"], ["changeVar:by:", "ip", 1]]]]],
				[10, 25409, [["whenIReceive", "ctLOOP"], ["append:toList:", "LOOP", "Codes"], ["call", "ct_loop"]]],
				[10, 25497, [["whenIReceive", "ct+LOOP"], ["append:toList:", "+LOOP", "Codes"], ["call", "ct_loop"]]],
				[10,
					25585,
					[["procDef", "ct_loop", [], [], true],
						["append:toList:", ["lineCountOfList:", "Codes"], "Codes"],
						["call", "rpop"],
						["doUntil",
							["=", ["readVariable", "Popped"], "-1"],
							[["setLine:ofList:to:",
									["readVariable", "Popped"],
									"Codes",
									["+", ["-", ["lineCountOfList:", "Codes"], ["readVariable", "Popped"]], 1]],
								["call", "rpop"]]],
						["call", "POP"],
						["setLine:ofList:to:", "last", "Codes", ["-", ["readVariable", "Popped"], ["getLine:ofList:", "last", "Codes"]]]]],
				[10,
					25857,
					[["whenIReceive", "rtLEAVE"],
						["deleteLine:ofList:", 1, "return"],
						["deleteLine:ofList:", 1, "return"],
						["changeVar:by:", "ip", ["readVariable", "next_code"]]]],
				[10,
					25971,
					[["whenIReceive", "ctLEAVE"],
						["append:toList:", "LEAVE", "Codes"],
						["append:toList:", "0", "Codes"],
						["call", "rpush %n", ["lineCountOfList:", "Codes"]]]],
				[10, 26085, [["whenIReceive", "ctBEGIN"], ["call", "PUSH %n", ["lineCountOfList:", "Codes"]]]],
				[10,
					26155,
					[["whenIReceive", "rtUNTIL"],
						["call", "POP"],
						["doIfElse",
							["=", ["readVariable", "Popped"], "0"],
							[["changeVar:by:", "ip", ["readVariable", "next_code"]]],
							[["changeVar:by:", "ip", 1]]]]],
				[10,
					26333,
					[["whenIReceive", "ctUNTIL"],
						["call", "POP"],
						["append:toList:", "UNTIL", "Codes"],
						["append:toList:", ["-", ["readVariable", "Popped"], ["lineCountOfList:", "Codes"]], "Codes"]]],
				[10,
					26451,
					[["whenIReceive", "rtWHILE"],
						["call", "POP"],
						["doIfElse",
							["=", ["readVariable", "Popped"], "0"],
							[["changeVar:by:", "ip", ["readVariable", "next_code"]]],
							[["changeVar:by:", "ip", 1]]]]],
				[10,
					26629,
					[["whenIReceive", "ctWHILE"],
						["append:toList:", "WHILE", "Codes"],
						["append:toList:", "0", "Codes"],
						["call", "PUSH %n", ["lineCountOfList:", "Codes"]]]],
				[10, 26743, [["whenIReceive", "rtREPEAT"], ["changeVar:by:", "ip", ["readVariable", "next_code"]]]],
				[10,
					26813,
					[["whenIReceive", "ctREPEAT"],
						["call", "POP"],
						["setLine:ofList:to:",
							["readVariable", "Popped"],
							"Codes",
							["+", ["-", ["lineCountOfList:", "Codes"], ["readVariable", "Popped"]], 3]],
						["call", "POP"],
						["append:toList:", "REPEAT", "Codes"],
						["append:toList:", ["-", ["readVariable", "Popped"], ["lineCountOfList:", "Codes"]], "Codes"]]],
				[10,
					26987,
					[["whenIReceive", "rtHERE"], ["call", "PUSH %n", ["+", ["lineCountOfList:", "Codes"], 1]]]],
				[10,
					27061,
					[["whenIReceive", "rtFORGET"],
						["doIfElse",
							["=", ["readVariable", "ip"], ["readVariable", "ip_repl"]],
							[["changeVar:by:", "ip_repl", 1]],
							[["changeVar:by:", "ip", 1]]],
						["doIfElse",
							["list:contains:", "Words", ["readVariable", "next_code"]],
							[["call", "find_word %s %n", ["readVariable", "next_code"], ["lineCountOfList:", "Words"]],
								["setVar:to:", "ip_delete", ["getLine:ofList:", ["readVariable", "idx"], "Word_code"]],
								["doRepeat",
									["+", ["-", ["lineCountOfList:", "Words"], ["readVariable", "idx"]], 1],
									[["deleteLine:ofList:", "last", "Words"], ["deleteLine:ofList:", "last", "Word_code"]]]],
							[["setVar:to:", "error", "-15"]]]]],
				[10, 27448, [["whenIReceive", "PUSH"], ["call", "PUSH %n", ["readVariable", "Number"]]]],
				[10,
					27518,
					[["procDef", "PUSH %n", ["arg1"], [0], true],
						["insert:at:ofList:", ["getParam", "arg1", "r"], 1, "data"]]],
				[10,
					27631,
					[["procDef", "rpush %n", ["arg1"], [0], true],
						["insert:at:ofList:", ["getParam", "arg1", "r"], 1, "return"]]],
				[10, 27744, [["whenIReceive", "POP"], ["call", "POP"]]],
				[10,
					27810,
					[["procDef", "POP", [], [], true],
						["call", "check_data"],
						["setVar:to:", "Popped", ["getLine:ofList:", 1, "data"]],
						["deleteLine:ofList:", 1, "data"]]],
				[10,
					27950,
					[["procDef", "DROP", [], [], true], ["call", "check_data"], ["deleteLine:ofList:", 1, "data"]]],
				[10,
					28064,
					[["procDef", "check_data", [], [], true],
						["doIf",
							["=", ["lineCountOfList:", "data"], "0"],
							[["setVar:to:", "error", "-4"], ["setVar:to:", "ip", ["\/", 1, 0]]]]]],
				[10,
					28228,
					[["procDef", "rpop", [], [], true],
						["setVar:to:", "Popped", ["getLine:ofList:", 1, "return"]],
						["deleteLine:ofList:", 1, "return"]]],
				[10,
					28346,
					[["procDef", "println %s", ["s"], [""], false],
						["call", "..DQ. %s", ["getParam", "s", "r"]],
						["changeVar:by:", "Current_row", 1],
						["setVar:to:", "Current_column", "0"]]],
				[10,
					28503,
					[["procDef", "..DQ. %s", ["s"], [""], false],
						["setVar:to:", "String", ["getParam", "s", "r"]],
						["doBroadcastAndWait", "print"]]],
				[10,
					28638,
					[["procDef", "print_one %s", ["char"], [""], false],
						["setVar:to:", "Character", ["getParam", "char", "r"]],
						["doBroadcastAndWait", "print_one"]]],
				[10,
					28773,
					[["procDef", "make_terminated", [], [], true],
						["deleteLine:ofList:", "all", "Terminated"],
						["deleteLine:ofList:", "all", "Terminator"],
						["append:toList:", "\"", "Terminated"],
						["append:toList:", "\"", "Terminator"],
						["append:toList:", "(", "Terminated"],
						["append:toList:", ")", "Terminator"]]],
				[10,
					28975,
					[["procDef", "make_immediates", [], [], true],
						["deleteLine:ofList:", "all", "Immediates"],
						["append:toList:", "IF", "Immediates"],
						["append:toList:", "ELSE", "Immediates"],
						["append:toList:", "THEN", "Immediates"],
						["append:toList:", "[CHAR]", "Immediates"],
						["append:toList:", "DO", "Immediates"],
						["append:toList:", "LOOP", "Immediates"],
						["append:toList:", "+LOOP", "Immediates"],
						["append:toList:", "LEAVE", "Immediates"],
						["append:toList:", "?DO", "Immediates"],
						["append:toList:", "BEGIN", "Immediates"],
						["append:toList:", "UNTIL", "Immediates"],
						["append:toList:", "WHILE", "Immediates"],
						["append:toList:", "REPEAT", "Immediates"],
						["append:toList:", ".\"", "Immediates"],
						["append:toList:", "(", "Immediates"],
						["append:toList:", "ABORT\"", "Immediates"],
						["append:toList:", "[']", "Immediates"],
						["append:toList:", "POSTPONE", "Immediates"]]],
				[10,
					29463,
					[["procDef", "make_built_in", [], [], true],
						["deleteLine:ofList:", "all", "Built_in"],
						["append:toList:", "INKEY", "Built_in"],
						["append:toList:", "MS", "Built_in"],
						["append:toList:", "TIMER", "Built_in"],
						["append:toList:", "TIME&DATE", "Built_in"],
						["append:toList:", "BELL", "Built_in"],
						["append:toList:", "DRUM", "Built_in"],
						["append:toList:", "REST", "Built_in"],
						["append:toList:", "PLAY", "Built_in"],
						["append:toList:", "GOTO-XY", "Built_in"],
						["append:toList:", "MOVE", "Built_in"],
						["append:toList:", "DOWN", "Built_in"],
						["append:toList:", "UP", "Built_in"],
						["append:toList:", "CLEAR", "Built_in"],
						["append:toList:", "PAGE", "Built_in"],
						["append:toList:", "AT-XY", "Built_in"],
						["append:toList:", "POS@", "Built_in"],
						["append:toList:", "EMIT", "Built_in"],
						["append:toList:", ".\"", "Built_in"],
						["append:toList:", "CR", "Built_in"],
						["append:toList:", "SPACE", "Built_in"],
						["append:toList:", "SPACES", "Built_in"],
						["append:toList:", "+", "Built_in"],
						["append:toList:", "-", "Built_in"],
						["append:toList:", "*", "Built_in"],
						["append:toList:", "\/", "Built_in"],
						["append:toList:", "F\/", "Built_in"],
						["append:toList:", "INT", "Built_in"],
						["append:toList:", "FLOOR", "Built_in"],
						["append:toList:", "FROUND", "Built_in"],
						["append:toList:", "1+", "Built_in"],
						["append:toList:", "1-", "Built_in"],
						["append:toList:", "2+", "Built_in"],
						["append:toList:", "2-", "Built_in"],
						["append:toList:", "2*", "Built_in"],
						["append:toList:", "2\/", "Built_in"],
						["append:toList:", "MOD", "Built_in"],
						["append:toList:", "\/MOD", "Built_in"],
						["append:toList:", "*\/", "Built_in"],
						["append:toList:", "*\/MOD", "Built_in"],
						["append:toList:", ".", "Built_in"],
						["append:toList:", ".R", "Built_in"],
						["append:toList:", ".S", "Built_in"],
						["append:toList:", "(", "Built_in"],
						["append:toList:", "DROP", "Built_in"],
						["append:toList:", "2DROP", "Built_in"],
						["append:toList:", "DUP", "Built_in"],
						["append:toList:", "2DUP", "Built_in"],
						["append:toList:", "SWAP", "Built_in"],
						["append:toList:", "2SWAP", "Built_in"],
						["append:toList:", "ROT", "Built_in"],
						["append:toList:", "2ROT", "Built_in"],
						["append:toList:", "OVER", "Built_in"],
						["append:toList:", "2OVER", "Built_in"],
						["append:toList:", "ABS", "Built_in"],
						["append:toList:", "NEGATE", "Built_in"],
						["append:toList:", "MIN", "Built_in"],
						["append:toList:", "MAX", "Built_in"],
						["append:toList:", ">R", "Built_in"],
						["append:toList:", "R>", "Built_in"],
						["append:toList:", "I", "Built_in"],
						["append:toList:", "I'", "Built_in"],
						["append:toList:", "J", "Built_in"],
						["append:toList:", "K", "Built_in"],
						["append:toList:", "R.S", "Built_in"],
						["append:toList:", ":", "Built_in"],
						["append:toList:", "MARKER", "Built_in"],
						["append:toList:", "CREATE", "Built_in"],
						["append:toList:", "DOES>", "Built_in"],
						["append:toList:", ",", "Built_in"],
						["append:toList:", "ALLOT", "Built_in"],
						["append:toList:", "VARIABLE", "Built_in"],
						["append:toList:", "!", "Built_in"],
						["append:toList:", "+!", "Built_in"],
						["append:toList:", "@", "Built_in"],
						["append:toList:", "CONSTANT", "Built_in"],
						["append:toList:", "=", "Built_in"],
						["append:toList:", "<", "Built_in"],
						["append:toList:", ">", "Built_in"],
						["append:toList:", "INVERT", "Built_in"],
						["append:toList:", "0=", "Built_in"],
						["append:toList:", "0<", "Built_in"],
						["append:toList:", "AND", "Built_in"],
						["append:toList:", "OR", "Built_in"],
						["append:toList:", "?DUP", "Built_in"],
						["append:toList:", "ABORT\"", "Built_in"],
						["append:toList:", "QUIT", "Built_in"],
						["append:toList:", "?STACK", "Built_in"],
						["append:toList:", "IF", "Built_in"],
						["append:toList:", "ELSE", "Built_in"],
						["append:toList:", "THEN", "Built_in"],
						["append:toList:", "[CHAR]", "Built_in"],
						["append:toList:", "EXIT", "Built_in"],
						["append:toList:", "EXECUTE", "Built_in"],
						["append:toList:", "'", "Built_in"],
						["append:toList:", "[']", "Built_in"],
						["append:toList:", "POSTPONE", "Built_in"],
						["append:toList:", "DO", "Built_in"],
						["append:toList:", "LOOP", "Built_in"],
						["append:toList:", "+LOOP", "Built_in"],
						["append:toList:", "LEAVE", "Built_in"],
						["append:toList:", "?DO", "Built_in"],
						["append:toList:", "BEGIN", "Built_in"],
						["append:toList:", "WHILE", "Built_in"],
						["append:toList:", "REPEAT", "Built_in"],
						["append:toList:", "UNTIL", "Built_in"],
						["append:toList:", ".KEYB", "Built_in"],
						["append:toList:", "IMMEDIATE", "Built_in"],
						["append:toList:", "HERE", "Built_in"],
						["append:toList:", "FORGET", "Built_in"],
						["append:toList:", "WORDS", "Built_in"]]],
				[19,
					11,
					[["whenGreenFlag"],
						["call", "INIT"],
						["call", "run_examples"],
						["call", "println %s", "#MOBLuSE_FORTH 0.11.3"],
						["call", "println %s", "© 2016 Orbin, Lund, Sweden"],
						["call", "println %s", "FOSS with license CC BY-SA 2.0"],
						["call", "println %s", ""],
						["setVar:to:", "TermInpBuf", ""],
						["call", "print_one %s", "_"],
						["stopScripts", "all"]]]],
			"costumes": [{
					"costumeName": "klädsel1",
					"baseLayerID": 2,
					"baseLayerMD5": "f6d98070141ab4477758d95b24553103.svg",
					"bitmapResolution": 1,
					"rotationCenterX": 24,
					"rotationCenterY": 25
				}],
			"currentCostumeIndex": 0,
			"scratchX": -199.99999999999997,
			"scratchY": 4.263256414560601e-14,
			"scale": 1,
			"direction": 90,
			"rotationStyle": "normal",
			"isDraggable": false,
			"indexInLibrary": 1,
			"visible": false,
			"spriteInfo": {
			}
		},
		{
			"objName": "Keyboard",
			"variables": [{
					"name": "_shift",
					"value": false,
					"isPersistent": false
				},
				{
					"name": "_key",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "_string",
					"value": "",
					"isPersistent": false
				},
				{
					"name": "_index",
					"value": "0",
					"isPersistent": false
				},
				{
					"name": "_semaphore",
					"value": false,
					"isPersistent": false
				}],
			"lists": [{
					"listName": "_key_buf",
					"contents": [],
					"isPersistent": false,
					"x": 5,
					"y": 5,
					"width": 123,
					"height": 208,
					"visible": false
				}],
			"scripts": [[10,
					10,
					[["whenIReceive", "initKeyboard"],
						["setVar:to:", "_string", ""],
						["setVar:to:", "_index", "0"],
						["setVar:to:", "Inkey", ""],
						["setVar:to:", "_shift", ["readVariable", "FALSE"]],
						["setVar:to:", "_key", ""],
						["setVar:to:", "_semaphore", ["readVariable", "FALSE"]],
						["show"]]],
				[10, 216, [["whenClicked"], ["call", "_ask"]]],
				[10, 282, [["whenKeyPressed", "up arrow"], ["setVar:to:", "_shift", ["readVariable", "TRUE"]]]],
				[10,
					352,
					[["procDef", "_receive_key %s", ["char"], [""], false],
						["call", "_set_key %s", ["getParam", "char", "r"]],
						["doIf",
							["|", ["=", ["readVariable", "_shift"], ["readVariable", "TRUE"]], ["keyPressed:", "up arrow"]],
							[["doBroadcastAndWait", ["concatenate:with:", "sh", ["readVariable", "Inkey"]]]]],
						["setVar:to:", "_shift", ["readVariable", "FALSE"]],
						["insert:at:ofList:", ["readVariable", "Inkey"], 1, "_key_buf"],
						["doIf",
							["=", ["readVariable", "_semaphore"], ["readVariable", "FALSE"]],
							[["setVar:to:", "_semaphore", ["readVariable", "TRUE"]], ["broadcast:", "keys"]]]]],
				[10,
					692,
					[["whenIReceive", "keys"],
						["doUntil",
							["=", ["lineCountOfList:", "_key_buf"], "0"],
							[["setVar:to:", "_key", ["getLine:ofList:", "last", "_key_buf"]],
								["deleteLine:ofList:", "last", "_key_buf"],
								["playSound:", "pop"],
								["doIf",
									["=", ["readVariable", "Running"], ["readVariable", "FALSE"]],
									[["doIfElse",
											["=", ["readVariable", "_key"], "♪"],
											[["call", "_cr"]],
											[["doIfElse",
													["=", ["readVariable", "_key"], "◘"],
													[["doIf",
															[">", ["stringLength:", ["readVariable", "TermInpBuf"]], "0"],
															[["call", "_backspace_scr"], ["call", "_backspace_scr"], ["call", "_backspace_buf"], ["call", "_print_one %s", "_"]]]],
													[["call", "_print_n_buffer %s", ["readVariable", "_key"]]]]]]]]]],
						["setVar:to:", "_semaphore", ["readVariable", "FALSE"]]]],
				[10,
					1238,
					[["procDef", "_set_key %s", ["char"], [""], true],
						["setVar:to:", "Inkey", ["getParam", "char", "r"]]]],
				[10,
					1351,
					[["procDef", "_cr", [], [], false],
						["setVar:to:", "_semaphore", ["readVariable", "FALSE"]],
						["call", "_evaluate_print"]]],
				[10,
					1443,
					[["procDef", "_ask", [], [], false],
						["hide"],
						["doAsk", "Enter FORTH:"],
						["setVar:to:", "_semaphore", ["readVariable", "FALSE"]],
						["setVar:to:", "_index", "1"],
						["doRepeat", ["stringLength:", ["readVariable", "TermInpBuf"]], [["call", "_backspace_scr"]]],
						["doRepeat",
							["stringLength:", ["answer"]],
							[["setVar:to:", "_string", ["letter:of:", ["readVariable", "_index"], ["answer"]]],
								["doIf",
									["|", ["=", ["readVariable", "_string"], "“"], ["=", ["readVariable", "_string"], "”"]],
									[["setVar:to:", "_string", "\""]]],
								["call", "_append_buf %s", ["readVariable", "_string"]],
								["changeVar:by:", "_index", 1]]],
						["call", "_backspace_scr"],
						["call", "_print %s", ["concatenate:with:", ["readVariable", "TermInpBuf"], " _"]],
						["call", "_evaluate_print"],
						["show"]]],
				[10,
					1919,
					[["procDef", "_evaluate_print", [], [], false],
						["call", "_backspace_scr"],
						["call", "_print_one %s", " "],
						["doBroadcastAndWait", "evaluate_buffer"],
						["doBroadcastAndWait", "print_response"],
						["append:toList:", ["readVariable", "TermInpBuf"], "History"],
						["setVar:to:", "TermInpBuf", ""],
						["call", "_print_one %s", "_"]]],
				[10,
					2147,
					[["procDef", "_print_n_buffer %s", ["char"], [""], false],
						["call", "_backspace_scr"],
						["call", "_append_buf %s", ["getParam", "char", "r"]],
						["call", "_print %s", ["concatenate:with:", ["getParam", "char", "r"], "_"]]]],
				[10,
					2325,
					[["procDef", "_append_buf %s", ["char"], [""], true],
						["setVar:to:", "TermInpBuf", ["concatenate:with:", ["readVariable", "TermInpBuf"], ["getParam", "char", "r"]]]]],
				[10,
					2442,
					[["procDef", "_backspace_scr", [], [], false],
						["doIfElse",
							["=", ["readVariable", "Current_column"], "0"],
							[["changeVar:by:", "Current_row", -1],
								["doIfElse",
									["<", ["readVariable", "Current_row"], "0"],
									[["setVar:to:", "Current_row", "0"]],
									[["doBroadcastAndWait", ["concatenate:with:", "bs", ["readVariable", "Current_row"]]]]]],
							[["doBroadcastAndWait", ["concatenate:with:", "bs", ["readVariable", "Current_row"]]]]]]],
				[10,
					2744,
					[["procDef", "_backspace_buf", [], [], false],
						["call", "_head %s", ["readVariable", "TermInpBuf"]],
						["setVar:to:", "TermInpBuf", ["readVariable", "_string"]]]],
				[10,
					2866,
					[["procDef", "_print %s", ["s"], [""], false],
						["setVar:to:", "String", ["getParam", "s", "r"]],
						["doBroadcastAndWait", "print"]]],
				[10,
					3001,
					[["procDef", "_print_one %s", ["char"], [""], false],
						["setVar:to:", "Character", ["letter:of:", 1, ["getParam", "char", "r"]]],
						["doBroadcastAndWait", "print_one"]]],
				[10,
					3140,
					[["procDef", "_head %s", ["s"], [""], true],
						["setVar:to:", "_string", ""],
						["setVar:to:", "_index", "1"],
						["doRepeat",
							["-", ["stringLength:", ["getParam", "s", "r"]], 1],
							[["setVar:to:",
									"_string",
									["concatenate:with:", ["readVariable", "_string"], ["letter:of:", ["readVariable", "_index"], ["getParam", "s", "r"]]]],
								["changeVar:by:", "_index", 1]]]]],
				[10, 3389, [["whenIReceive", "sh1"], ["call", "_set_key %s", "!"]]],
				[10, 3455, [["whenIReceive", "sh2"], ["call", "_set_key %s", "@"]]],
				[10, 3521, [["whenIReceive", "sh3"], ["call", "_set_key %s", "#"]]],
				[10, 3587, [["whenIReceive", "sh4"], ["call", "_set_key %s", "["]]],
				[10, 3653, [["whenIReceive", "sh5"], ["call", "_set_key %s", "%"]]],
				[10, 3719, [["whenIReceive", "sh6"], ["call", "_set_key %s", "]"]]],
				[10, 3785, [["whenIReceive", "sh7"], ["call", "_set_key %s", "&"]]],
				[10, 3851, [["whenIReceive", "sh8"], ["call", "_set_key %s", "_"]]],
				[10, 3917, [["whenIReceive", "sh9"], ["call", "_set_key %s", "©"]]],
				[10, 3983, [["whenIReceive", "sh0"], ["call", "_set_key %s", "◘"]]],
				[10, 4049, [["whenIReceive", "shQ"], ["call", "_set_key %s", "'"]]],
				[10, 4115, [["whenIReceive", "shW"], ["call", "_set_key %s", "|"]]],
				[10, 4181, [["whenIReceive", "shE"], ["call", "_set_key %s", "~"]]],
				[10, 4247, [["whenIReceive", "shR"], ["call", "_set_key %s", "{"]]],
				[10, 4313, [["whenIReceive", "shT"], ["call", "_set_key %s", "\\"]]],
				[10, 4379, [["whenIReceive", "shY"], ["call", "_set_key %s", "}"]]],
				[10, 4445, [["whenIReceive", "shU"], ["call", "_set_key %s", "$"]]],
				[10, 4511, [["whenIReceive", "shI"], ["call", "_set_key %s", "("]]],
				[10, 4577, [["whenIReceive", "shO"], ["call", "_set_key %s", ")"]]],
				[10, 4643, [["whenIReceive", "shP"], ["call", "_set_key %s", "\""]]],
				[10,
					4709,
					[["whenIReceive", "shA"],
						["call", "_set_key %s", ""],
						["setVar:to:", "_shift", ["readVariable", "FALSE"]],
						["doIf", ["=", ["readVariable", "Running"], ["readVariable", "FALSE"]], [["call", "_ask"]]]]],
				[10, 4869, [["whenIReceive", "shS"], ["call", "_set_key %s", "`"]]],
				[10, 4935, [["whenIReceive", "shD"], ["call", "_set_key %s", "´"]]],
				[10, 5001, [["whenIReceive", "shF"], ["call", "_set_key %s", "¨"]]],
				[10, 5067, [["whenIReceive", "shG"], ["call", "_set_key %s", "€"]]],
				[10, 5133, [["whenIReceive", "shH"], ["call", "_set_key %s", "^"]]],
				[10, 5199, [["whenIReceive", "shJ"], ["call", "_set_key %s", "-"]]],
				[10, 5265, [["whenIReceive", "shK"], ["call", "_set_key %s", "+"]]],
				[10, 5331, [["whenIReceive", "shL"], ["call", "_set_key %s", "="]]],
				[10, 5397, [["whenIReceive", "shZ"], ["call", "_set_key %s", ":"]]],
				[10, 5463, [["whenIReceive", "shX"], ["call", "_set_key %s", ";"]]],
				[10, 5529, [["whenIReceive", "shC"], ["call", "_set_key %s", "?"]]],
				[10, 5595, [["whenIReceive", "shV"], ["call", "_set_key %s", "\/"]]],
				[10, 5661, [["whenIReceive", "shB"], ["call", "_set_key %s", "*"]]],
				[10, 5727, [["whenIReceive", "shN"], ["call", "_set_key %s", "<"]]],
				[10, 5793, [["whenIReceive", "shM"], ["call", "_set_key %s", ">"]]],
				[10, 5859, [["whenIReceive", "sh."], ["call", "_set_key %s", ","]]],
				[10, 5925, [["whenIReceive", "sh◘"], ["call", "_set_key %s", "µ"]]],
				[10, 5991, [["whenIReceive", "sh♪"], ["call", "_set_key %s", "Å"]]],
				[10,
					6057,
					[["whenIReceive", "sh "],
						["call", "_set_key %s", ""],
						["setVar:to:", "_shift", ["readVariable", "FALSE"]],
						["doBroadcastAndWait", "break"]]],
				[10, 6171, [["whenKeyPressed", "space"], ["call", "_receive_key %s", " "]]],
				[10, 6237, [["whenKeyPressed", "a"], ["call", "_receive_key %s", "A"]]],
				[10, 6303, [["whenKeyPressed", "b"], ["call", "_receive_key %s", "B"]]],
				[10, 6369, [["whenKeyPressed", "c"], ["call", "_receive_key %s", "C"]]],
				[10, 6435, [["whenKeyPressed", "d"], ["call", "_receive_key %s", "D"]]],
				[10, 6501, [["whenKeyPressed", "e"], ["call", "_receive_key %s", "E"]]],
				[10, 6567, [["whenKeyPressed", "f"], ["call", "_receive_key %s", "F"]]],
				[10, 6633, [["whenKeyPressed", "g"], ["call", "_receive_key %s", "G"]]],
				[10, 6699, [["whenKeyPressed", "h"], ["call", "_receive_key %s", "H"]]],
				[10, 6765, [["whenKeyPressed", "i"], ["call", "_receive_key %s", "I"]]],
				[10, 6831, [["whenKeyPressed", "j"], ["call", "_receive_key %s", "J"]]],
				[10, 6897, [["whenKeyPressed", "k"], ["call", "_receive_key %s", "K"]]],
				[10, 6963, [["whenKeyPressed", "l"], ["call", "_receive_key %s", "L"]]],
				[10, 7029, [["whenKeyPressed", "m"], ["call", "_receive_key %s", "M"]]],
				[10, 7095, [["whenKeyPressed", "n"], ["call", "_receive_key %s", "N"]]],
				[10, 7161, [["whenKeyPressed", "o"], ["call", "_receive_key %s", "O"]]],
				[10, 7227, [["whenKeyPressed", "p"], ["call", "_receive_key %s", "P"]]],
				[10, 7293, [["whenKeyPressed", "q"], ["call", "_receive_key %s", "Q"]]],
				[10, 7359, [["whenKeyPressed", "r"], ["call", "_receive_key %s", "R"]]],
				[10, 7425, [["whenKeyPressed", "s"], ["call", "_receive_key %s", "S"]]],
				[10, 7491, [["whenKeyPressed", "t"], ["call", "_receive_key %s", "T"]]],
				[10, 7557, [["whenKeyPressed", "u"], ["call", "_receive_key %s", "U"]]],
				[10, 7623, [["whenKeyPressed", "v"], ["call", "_receive_key %s", "V"]]],
				[10, 7689, [["whenKeyPressed", "w"], ["call", "_receive_key %s", "W"]]],
				[10, 7755, [["whenKeyPressed", "x"], ["call", "_receive_key %s", "X"]]],
				[10, 7821, [["whenKeyPressed", "y"], ["call", "_receive_key %s", "Y"]]],
				[10, 7887, [["whenKeyPressed", "z"], ["call", "_receive_key %s", "Z"]]],
				[10, 7953, [["whenKeyPressed", "0"], ["call", "_receive_key %s", "0"]]],
				[10, 8019, [["whenKeyPressed", "1"], ["call", "_receive_key %s", "1"]]],
				[10, 8085, [["whenKeyPressed", "2"], ["call", "_receive_key %s", "2"]]],
				[10, 8151, [["whenKeyPressed", "3"], ["call", "_receive_key %s", "3"]]],
				[10, 8217, [["whenKeyPressed", "4"], ["call", "_receive_key %s", "4"]]],
				[10, 8283, [["whenKeyPressed", "5"], ["call", "_receive_key %s", "5"]]],
				[10, 8349, [["whenKeyPressed", "6"], ["call", "_receive_key %s", "6"]]],
				[10, 8415, [["whenKeyPressed", "7"], ["call", "_receive_key %s", "7"]]],
				[10, 8481, [["whenKeyPressed", "8"], ["call", "_receive_key %s", "8"]]],
				[10, 8547, [["whenKeyPressed", "9"], ["call", "_receive_key %s", "9"]]],
				[10, 8613, [["whenKeyPressed", "right arrow"], ["call", "_receive_key %s", "."]]],
				[10, 8679, [["whenKeyPressed", "left arrow"], ["call", "_receive_key %s", "◘"]]],
				[10, 8745, [["whenKeyPressed", "down arrow"], ["call", "_receive_key %s", "♪"]]]],
			"sounds": [{
					"soundName": "pop",
					"soundID": 0,
					"md5": "83a9787d4cb6f3b7632b4ddfebf74367.wav",
					"sampleCount": 258,
					"rate": 11025,
					"format": ""
				}],
			"costumes": [{
					"costumeName": "keyb1",
					"baseLayerID": 3,
					"baseLayerMD5": "e76fa785ce20f85904bc68d1ffcf4f28.svg",
					"bitmapResolution": 1,
					"rotationCenterX": 24,
					"rotationCenterY": 25
				},
				{
					"costumeName": "laptop",
					"baseLayerID": 4,
					"baseLayerMD5": "5908754a7dc4c7343b1bec1af2b2f2e1.svg",
					"bitmapResolution": 1,
					"rotationCenterX": 69,
					"rotationCenterY": 13
				}],
			"currentCostumeIndex": 1,
			"scratchX": 167,
			"scratchY": 164,
			"scale": 1,
			"direction": 90,
			"rotationStyle": "normal",
			"isDraggable": false,
			"indexInLibrary": 4,
			"visible": true,
			"spriteInfo": {
			}
		},
		{
			"objName": "Stackless",
			"scripts": [[10, 10, [["whenGreenFlag"], ["hide"]]],
				[10,
					83,
					[["whenIReceive", "rtWORDS"],
						["call",
							"..DQ. %s",
							["concatenate:with:", ["concatenate:with:", ["concatenate:with:", ["contentsOfList:", "Built_in"], " "], ["contentsOfList:", "Words"]], " "]]]],
				[10, 165, [["whenIReceive", "rtIMMEDIATE"], ["append:toList:", ["getLine:ofList:", "last", "Words"], "Immediates"]]],
				[10, 235, [["whenIReceive", "rtBELL"], ["broadcast:", "bell"], ["wait:elapsed:from:", 0.1]]],
				[10, 323, [["whenIReceive", "bell"], ["instrument:", 2], ["noteOn:duration:elapsed:from:", 70, 0.25]]],
				[10, 411, [["whenIReceive", "rtCLEAR"], ["clearPenTrails"]]],
				[10, 477, [["whenIReceive", "rtPAGE"], ["call", "PAGE"]]],
				[10, 543, [["whenIReceive", "rtCR"], ["call", "println %s", ""]]],
				[10, 609, [["whenIReceive", "rtSPACE"], ["call", "..DQ. %s", " "]]],
				[10, 675, [["whenIReceive", "rt.KEYB"], ["call", ".KEYB"]]],
				[10,
					741,
					[["procDef", "PAGE", ["arg1"], [null], false], ["doBroadcastAndWait", "cls"]]],
				[10,
					833,
					[["procDef", "println %s", ["s"], [""], false],
						["call", "..DQ. %s", ["getParam", "s", "r"]],
						["changeVar:by:", "Current_row", 1],
						["setVar:to:", "Current_column", "0"]]],
				[10,
					990,
					[["procDef", "..DQ. %s", ["s"], [""], false],
						["setVar:to:", "String", ["getParam", "s", "r"]],
						["doBroadcastAndWait", "print"]]],
				[10,
					1125,
					[["procDef", ".KEYB", ["arg1"], [null], false],
						["call", "println %s", ""],
						["call", "println %s", "1! 2@ 3# 4[ 5% 6] 7& 8_ 9© 0␈"],
						["call", "println %s", "Q' W| E~ R{ T\\ Y} U$ I( O) P\""],
						["call", "println %s", "Aa S` D´  F£ G€ H^ J- K+ L="],
						["call", "println %s", "Z: X; C? V\/ B* N< M> ␠b ␈µ ␍Å .,"]]],
				[10,
					1305,
					[["procDef", ".ZXFKEYB", ["arg1"], [null], false],
						["call", "println %s", ""],
						["call", "println %s", "1  2  3  4  5  6  7  8  9  0␈"],
						["call", "println %s", "Q@ W! E# R  T  Y  U£ I( O) P\""],
						["call", "println %s", "A, S[ D  F  G] H  J- K+ L="],
						["call", "println %s", "Z: X; C? V\/ B* N< M> ␠  ␈  ␍  .,"]]],
				[10,
					1485,
					[["procDef", ".JAKEYB", ["arg1"], [null], false],
						["call", "println %s", ""],
						["call", "println %s", "1! 2@ 3# 4$ 5% 6& 7' 8( 9) 0_␈"],
						["call", "println %s", "Q  W  E  R< T> Y[ U] I© O; P\""],
						["call", "println %s", "A~ S| D\\ F[  G]  H^ J- K+ L="],
						["call", "println %s", "Z: X£ C? V\/ B* N, M. ␠  ␈  ␍  s"]]]],
			"costumes": [{
					"costumeName": "klädsel1",
					"baseLayerID": 5,
					"baseLayerMD5": "5229a8c364a54e43c658a1fc0a2c1391.svg",
					"bitmapResolution": 1,
					"rotationCenterX": 24,
					"rotationCenterY": 25
				}],
			"currentCostumeIndex": 0,
			"scratchX": 0,
			"scratchY": 0,
			"scale": 1,
			"direction": 90,
			"rotationStyle": "normal",
			"isDraggable": false,
			"indexInLibrary": 2,
			"visible": false,
			"spriteInfo": {
			}
		},
		{
			"objName": "Compiled",
			"scripts": [[10,
					10,
					[["hide"],
						["call", "INIT"],
						["call", "MAXMIN"],
						["call", "ANDOR"],
						["call", "FACT7"],
						["stopScripts", "all"]]],
				[10,
					154,
					[["procDef", "MAXMIN", [], [], false],
						["call", "PUSH %n", 1],
						["call", "PUSH %n", 2],
						["call", "MAX"],
						["call", "."],
						["call", "CR"],
						["call", "PUSH %n", 2],
						["call", "PUSH %n", 1],
						["call", "MAX"],
						["call", "."],
						["call", "CR"],
						["call", "PUSH %n", 1],
						["call", "PUSH %n", 2],
						["call", "MIN"],
						["call", "."],
						["call", "CR"],
						["call", "PUSH %n", 2],
						["call", "PUSH %n", 1],
						["call", "MIN"],
						["call", "."],
						["call", "CR"],
						["stopScripts", "this script"]]],
				[10,
					685,
					[["procDef", "ANDOR", [], [], false],
						["call", "TRUE"],
						["call", "FALSE"],
						["call", "AND"],
						["call", "."],
						["call", "CR"],
						["call", "TRUE"],
						["call", "TRUE"],
						["call", "AND"],
						["call", "."],
						["call", "CR"],
						["call", "TRUE"],
						["call", "FALSE"],
						["call", "OR"],
						["call", "."],
						["call", "CR"],
						["call", "FALSE"],
						["call", "FALSE"],
						["call", "OR"],
						["call", "."],
						["call", "CR"],
						["stopScripts", "this script"]]],
				[10,
					1216,
					[["procDef", "FACT7", [], [], false],
						["call", "PUSH %n", 7],
						["call", "FACT"],
						["call", "."],
						["stopScripts", "this script"]]],
				[10,
					1373,
					[["procDef", "FACT", [], [], false],
						["call", "DUP"],
						["call", "PUSH %n", 1],
						["call", ".EQ."],
						["call", "POP"],
						["doIfElse",
							["not", ["=", ["computeFunction:of:", "abs", ["readVariable", "Popped"]], "0"]],
							[["call", "DROP"], ["call", "PUSH %n", 1]],
							[["call", "DUP"],
								["call", "PUSH %n", 1],
								["call", ".SUB."],
								["call", "FACT"],
								["call", ".MUL."]]],
						["stopScripts", "this script"]]],
				[10, 1779, [["procDef", "INIT", [], [], false], ["doBroadcastAndWait", "INIT"]]],
				[10,
					1871,
					[["procDef", "PUSH %n", ["number1"], [0], false],
						["setVar:to:", "Number", ["getParam", "number1", "r"]],
						["doBroadcastAndWait", "PUSH"]]],
				[10, 2006, [["procDef", "POP", [], [], false], ["doBroadcastAndWait", "POP"]]],
				[10, 2098, [["procDef", "DROP", [], [], false], ["doBroadcastAndWait", "rtDROP"]]],
				[10, 2190, [["procDef", "DUP", [], [], false], ["doBroadcastAndWait", "rtDUP"]]],
				[10, 2282, [["procDef", ".EQ.", [], [], false], ["doBroadcastAndWait", "rt="]]],
				[10, 2374, [["procDef", ".ADD.", [], [], false], ["doBroadcastAndWait", "rt+"]]],
				[10, 2466, [["procDef", ".SUB.", [], [], false], ["doBroadcastAndWait", "rt-"]]],
				[10, 2558, [["procDef", ".MUL.", [], [], false], ["doBroadcastAndWait", "rt*"]]],
				[10, 2650, [["procDef", ".DIV.", [], [], false], ["doBroadcastAndWait", "rt\/"]]],
				[10, 2742, [["procDef", "OR", [], [], false], ["doBroadcastAndWait", "rtOR"]]],
				[10, 2834, [["procDef", "AND", [], [], false], ["doBroadcastAndWait", "rtAND"]]],
				[10, 2926, [["procDef", "FALSE", [], [], false], ["call", "PUSH %n", 0]]],
				[10, 3018, [["procDef", "TRUE", [], [], false], ["call", "PUSH %n", -1]]],
				[10, 3110, [["procDef", "MIN", [], [], false], ["doBroadcastAndWait", "rtMIN"]]],
				[10, 3202, [["procDef", "MAX", [], [], false], ["doBroadcastAndWait", "rtMAX"]]],
				[10, 3294, [["procDef", ".", [], [], false], ["doBroadcastAndWait", "rt."]]],
				[10, 3386, [["procDef", "CR", [], [], false], ["doBroadcastAndWait", "rtCR"]]]],
			"costumes": [{
					"costumeName": "turtle",
					"baseLayerID": 6,
					"baseLayerMD5": "2e3e6c795741ac4a523d3d0633476ca5.svg",
					"bitmapResolution": 1,
					"rotationCenterX": 8,
					"rotationCenterY": 8
				}],
			"currentCostumeIndex": 0,
			"scratchX": -28,
			"scratchY": -27,
			"scale": 1,
			"direction": 90,
			"rotationStyle": "normal",
			"isDraggable": false,
			"indexInLibrary": 5,
			"visible": false,
			"spriteInfo": {
			}
		},
		{
			"target": "Stage",
			"cmd": "getVar:",
			"param": "currrent column",
			"color": 15629590,
			"label": "currrent column",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 86,
			"y": 59,
			"visible": false
		},
		{
			"target": "Stage",
			"cmd": "getVar:",
			"param": "Current_column",
			"color": 15629590,
			"label": "Current_column",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 336,
			"y": 20,
			"visible": false
		},
		{
			"target": "Stage",
			"cmd": "getVar:",
			"param": "Current_row",
			"color": 15629590,
			"label": "Current_row",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 355,
			"y": 41,
			"visible": false
		},
		{
			"target": "Stage",
			"cmd": "getVar:",
			"param": "Character",
			"color": 15629590,
			"label": "Character",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 366,
			"y": 273,
			"visible": false
		},
		{
			"target": "Stage",
			"cmd": "getVar:",
			"param": "E.g. 1",
			"color": 15629590,
			"label": "E.g. 1",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 106,
			"y": 145,
			"visible": false
		},
		{
			"target": "Stage",
			"cmd": "getVar:",
			"param": "E.g. 2",
			"color": 15629590,
			"label": "E.g. 2",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 353,
			"y": 68,
			"visible": false
		},
		{
			"target": "Thread",
			"cmd": "getVar:",
			"param": "example",
			"color": 15629590,
			"label": "Thread: example",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 333,
			"y": 317,
			"visible": false
		},
		{
			"target": "Stage",
			"cmd": "getVar:",
			"param": "Popped",
			"color": 15629590,
			"label": "Popped",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 365,
			"y": 322,
			"visible": false
		},
		{
			"target": "Stage",
			"cmd": "getVar:",
			"param": "Number",
			"color": 15629590,
			"label": "Number",
			"mode": 1,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": 243,
			"y": 322,
			"visible": false
		},
		{
			"listName": "data",
			"contents": [],
			"isPersistent": false,
			"x": 363,
			"y": 65,
			"width": 110,
			"height": 257,
			"visible": true
		},
		{
			"listName": "return",
			"contents": [],
			"isPersistent": false,
			"x": 241,
			"y": 66,
			"width": 112,
			"height": 257,
			"visible": true
		},
		{
			"listName": "tokens",
			"contents": [":",
				"PENTAGRAM",
				"0x00ff0000",
				"COLOR",
				"!",
				"5",
				"0",
				"-200",
				"MOVE",
				"DOWN",
				"DO",
				"200",
				"MOVE",
				"144",
				"DIR",
				"+!",
				"I",
				"1+",
				"0.25",
				"DRUM",
				"LOOP",
				"UP",
				";",
				"PENTAGRAM",
				"FORGET",
				"TASK2"],
			"isPersistent": false,
			"x": 0,
			"y": 0,
			"width": 240,
			"height": 340,
			"visible": false
		},
		{
			"listName": "_key_buf",
			"contents": [],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 123,
			"height": 208,
			"visible": false
		},
		{
			"listName": "Built_in",
			"contents": ["INKEY",
				"MS",
				"TIMER",
				"TIME&DATE",
				"BELL",
				"DRUM",
				"REST",
				"PLAY",
				"GOTO-XY",
				"MOVE",
				"DOWN",
				"UP",
				"CLEAR",
				"PAGE",
				"AT-XY",
				"POS@",
				"EMIT",
				".\"",
				"CR",
				"SPACE",
				"SPACES",
				"+",
				"-",
				"*",
				"\/",
				"F\/",
				"INT",
				"FLOOR",
				"FROUND",
				"1+",
				"1-",
				"2+",
				"2-",
				"2*",
				"2\/",
				"MOD",
				"\/MOD",
				"*\/",
				"*\/MOD",
				".",
				".R",
				".S",
				"(",
				"DROP",
				"2DROP",
				"DUP",
				"2DUP",
				"SWAP",
				"2SWAP",
				"ROT",
				"2ROT",
				"OVER",
				"2OVER",
				"ABS",
				"NEGATE",
				"MIN",
				"MAX",
				">R",
				"R>",
				"I",
				"I'",
				"J",
				"K",
				"R.S",
				":",
				"MARKER",
				"CREATE",
				"DOES>",
				",",
				"ALLOT",
				"VARIABLE",
				"!",
				"+!",
				"@",
				"CONSTANT",
				"=",
				"<",
				">",
				"INVERT",
				"0=",
				"0<",
				"AND",
				"OR",
				"?DUP",
				"ABORT\"",
				"QUIT",
				"?STACK",
				"IF",
				"ELSE",
				"THEN",
				"[CHAR]",
				"EXIT",
				"EXECUTE",
				"'",
				"[']",
				"POSTPONE",
				"DO",
				"LOOP",
				"+LOOP",
				"LEAVE",
				"?DO",
				"BEGIN",
				"WHILE",
				"REPEAT",
				"UNTIL",
				".KEYB",
				"IMMEDIATE",
				"HERE",
				"FORGET",
				"WORDS"],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 222,
			"height": 322,
			"visible": false
		},
		{
			"listName": "Defs",
			"contents": [],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 130,
			"height": 230,
			"visible": false
		},
		{
			"listName": "Words",
			"contents": ["CORE",
				"BL",
				"INSTRUMENT",
				"TEMPO",
				"VOL",
				"X",
				"Y",
				"DIR",
				"COLOR",
				"HUE",
				"SHADE",
				"SIZE",
				"R@",
				"ABORT",
				"U.",
				"U<",
				"EXT",
				"FALSE",
				"TRUE",
				"U.R",
				"U>",
				"0>",
				"NIP",
				"TUCK",
				"?",
				"TASK",
				"-ROT",
				"CELLS",
				"CELL+",
				"ERASE",
				"DUMP",
				"FILL",
				"C!",
				"C@",
				"C,",
				"KEY"],
			"isPersistent": false,
			"x": 146,
			"y": 150,
			"width": 260,
			"height": 214,
			"visible": false
		},
		{
			"listName": "Word_code",
			"contents": [1,
				4,
				8,
				12,
				16,
				20,
				24,
				28,
				32,
				36,
				40,
				44,
				48,
				52,
				57,
				61,
				65,
				68,
				72,
				76,
				80,
				84,
				89,
				96,
				103,
				108,
				111,
				118,
				121,
				125,
				142,
				161,
				180,
				184,
				188,
				192],
			"isPersistent": false,
			"x": 1,
			"y": 3,
			"width": 258,
			"height": 358,
			"visible": false
		},
		{
			"listName": "Codes",
			"contents": [1,
				1,
				"EXIT",
				2,
				2,
				"32",
				"EXIT",
				3,
				2,
				"-1",
				"EXIT",
				4,
				2,
				"-2",
				"EXIT",
				5,
				2,
				"-3",
				"EXIT",
				6,
				2,
				"-4",
				"EXIT",
				7,
				2,
				"-5",
				"EXIT",
				8,
				2,
				"-6",
				"EXIT",
				9,
				2,
				"-7",
				"EXIT",
				10,
				2,
				"-8",
				"EXIT",
				11,
				2,
				"-9",
				"EXIT",
				12,
				2,
				"-10",
				"EXIT",
				13,
				2,
				"I'",
				"EXIT",
				14,
				3,
				"ABORT\"",
				"",
				"EXIT",
				15,
				2,
				".",
				"EXIT",
				16,
				2,
				"<",
				"EXIT",
				17,
				1,
				"EXIT",
				18,
				2,
				"0",
				"EXIT",
				19,
				2,
				"-1",
				"EXIT",
				20,
				2,
				".R",
				"EXIT",
				21,
				2,
				">",
				"EXIT",
				22,
				3,
				"0",
				">",
				"EXIT",
				23,
				5,
				"(",
				"a b -- b ",
				"swap",
				"drop",
				"EXIT",
				24,
				5,
				"(",
				"a b -- b a b ",
				"swap",
				"over",
				"EXIT",
				25,
				3,
				"@",
				".",
				"EXIT",
				26,
				1,
				"EXIT",
				27,
				5,
				"(",
				"a b c -- c a b ",
				"rot",
				"rot",
				"EXIT",
				28,
				1,
				"EXIT",
				29,
				2,
				"1+",
				"EXIT",
				30,
				15,
				"(",
				"addr n -- ",
				"CELLS",
				"OVER",
				"+",
				"SWAP",
				"DO",
				"0",
				"I",
				"!",
				"1",
				"CELLS",
				"+LOOP",
				-6,
				"EXIT",
				31,
				17,
				"(",
				"addr n -- ",
				"CELLS",
				"OVER",
				"+",
				"SWAP",
				"DO",
				"CR",
				"I",
				"@",
				"5",
				"U.R",
				"1",
				"CELLS",
				"+LOOP",
				-8,
				"EXIT",
				32,
				17,
				"(",
				"addr n b -- ",
				"-ROT",
				"CELLS",
				"OVER",
				"+",
				"SWAP",
				"DO",
				"DUP",
				"I",
				"!",
				"1",
				"CELLS",
				"+LOOP",
				-6,
				"DROP",
				"EXIT",
				33,
				2,
				"!",
				"EXIT",
				34,
				2,
				"@",
				"EXIT",
				35,
				2,
				",",
				"EXIT",
				36,
				9,
				"(",
				"-- ascii ",
				"50",
				"MS",
				"INKEY",
				"?DUP",
				"UNTIL",
				-5,
				"EXIT"],
			"isPersistent": false,
			"x": 283,
			"y": 6,
			"width": 182,
			"height": 358,
			"visible": false
		},
		{
			"listName": "Immediates",
			"contents": ["IF",
				"ELSE",
				"THEN",
				"[CHAR]",
				"DO",
				"LOOP",
				"+LOOP",
				"LEAVE",
				"?DO",
				"BEGIN",
				"UNTIL",
				"WHILE",
				"REPEAT",
				".\"",
				"(",
				"ABORT\"",
				"[']",
				"POSTPONE",
				"BOTH",
				"ORELSE",
				"NEITHER"],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 242,
			"height": 342,
			"visible": false
		},
		{
			"listName": "Terminated",
			"contents": ["\"", "("],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 228,
			"height": 328,
			"visible": false
		},
		{
			"listName": "Terminator",
			"contents": ["\"", ")"],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 228,
			"height": 328,
			"visible": false
		},
		{
			"listName": "Examples",
			"contents": [],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 234,
			"height": 359,
			"visible": false
		},
		{
			"listName": "History",
			"contents": [": TASK2 ; : QUADRATIC ( a b c x -- n ) >R SWAP ROT R@ *  + R> *  + ; 2 7 9 3 QUADRATIC .", ": GIFT  .\" chocolate\" ; : GIVER  .\" Mum\" ; : THANKS  CR .\" Dear \" GIVER .\" ,\" CR  .\"  Thanks for the \" GIFT .\" . \" ; THANKS", ": STAR  [CHAR] * EMIT ;  : STARS  0 ?DO STAR LOOP ;  : MARGIN  CR 25 SPACES ;  : BLIP  MARGIN STAR ;  : BAR  MARGIN 5 STARS ;  : F  BAR BLIP BAR BLIP BLIP CR ; F", ": FACT  ?DUP IF DUP 1 - FACT * ELSE 1 THEN ; 7 FACT .", ": EVEN? ; : ODD?  DUP 0= IF EXIT THEN 1 - EVEN? ; : EVEN?  DUP 0= IF 1 - EXIT THEN 1 - ODD? ; 8 ODD? . 8 EVEN? .", ": .charset 1 do i emit loop ; 159 .charset", ": .matrix ( r c -- ) swap 0 ?do cr dup 0 ?do .\" (\" j 1 + . .\" ,\" i 1 + . .\" ) \" loop loop drop ; 5 3 .matrix", ": R% ( n1 % -- n2 ) 10 *\/ 5 + 10 \/ ; : DOUBLED ( amount interest -- ) OVER 2* SWAP ROT 21 1 DO CR .\" Year \" I 2 .R 3 SPACES 2DUP R% + DUP .\" Bal \" . DUP 2OVER DROP > IF CR CR .\" More than doubled in \" I . .\" years \" LEAVE THEN LOOP 2DROP DROP ; 3000 11 DOUBLED", ": COUNTS  ' ROT ROT 0 DO  OVER EXECUTE LOOP  NIP ; : CONVICTED-OF  ( -- no-sentence )  0 ; : ARSON         ( sentence -- sentence+10 )  10 + ; : HOMICIDE      ( sentence -- sentence+20 )  20 + ; : BOOKMAKING    ( sentence -- sentence+2 )  2 + ; : TAX-EVASION   ( sentence -- sentence+5 )  5 + ; : WILL-SERVE    ( sentence -- )  . .\" years \" ; CONVICTED-OF BOOKMAKING 3 COUNTS TAX-EVASION WILL-SERVE", ": BOTH    postpone IF   postpone IF ; immediate : ORELSE  postpone THEN postpone ELSE postpone IF ; immediate : NEITHER postpone THEN postpone THEN ; immediate : fb ( n -- )  dup 5 mod 0=  over 3 mod 0=  BOTH   .\" FizzBuzz \"  ELSE   .\" Fizz \"  ORELSE .\" Buzz \"  ELSE   dup .  NEITHER drop ; : fizzbuzz ( n -- ) 0 do i 1+ fb loop ; 100 fizzbuzz", ": STRING   CREATE ALLOT  DOES> + ; 5 STRING VALVE  3 VALVE C@ .", ": PENTAGRAM 0x00ff0000 COLOR ! 5 0 -200 MOVE DOWN DO 200 MOVE 144 DIR +! I 1+ 0.25 DRUM LOOP UP ; PENTAGRAM  FORGET TASK2"],
			"isPersistent": false,
			"x": 5,
			"y": 5,
			"width": 206,
			"height": 359,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row5",
			"color": 15629590,
			"label": "Screen: row5",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 96,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row6",
			"color": 15629590,
			"label": "Screen: row6",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 116,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row7",
			"color": 15629590,
			"label": "Screen: row7",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 136,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row8",
			"color": 15629590,
			"label": "Screen: row8",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 156,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row9",
			"color": 15629590,
			"label": "Screen: row9",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 176,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row10",
			"color": 15629590,
			"label": "Screen: row10",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 196,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row11",
			"color": 15629590,
			"label": "Screen: row11",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 216,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row12",
			"color": 15629590,
			"label": "Screen: row12",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 236,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row13",
			"color": 15629590,
			"label": "Screen: row13",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 256,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row14",
			"color": 15629590,
			"label": "Screen: row14",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 276,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row15",
			"color": 15629590,
			"label": "Screen: row15",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 296,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row16",
			"color": 15629590,
			"label": "Screen: row16",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 316,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row17",
			"color": 15629590,
			"label": "Screen: row17",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 336,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row3",
			"color": 15629590,
			"label": "Screen: row3",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 56,
			"visible": false
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row0",
			"color": 15629590,
			"label": "Screen: row0",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": -4,
			"visible": true
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row1",
			"color": 15629590,
			"label": "Screen: row1",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 16,
			"visible": true
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row2",
			"color": 15629590,
			"label": "Screen: row2",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 36,
			"visible": true
		},
		{
			"target": "Screen",
			"cmd": "getVar:",
			"param": "row4",
			"color": 15629590,
			"label": "Screen: row4",
			"mode": 2,
			"sliderMin": 0,
			"sliderMax": 100,
			"isDiscrete": true,
			"x": -1,
			"y": 76,
			"visible": true
		}],
	"info": {
		"scriptCount": 379,
		"projectID": "137676871",
		"spriteCount": 5,
		"flashVersion": "WIN 24,0,0,194",
		"videoOn": false,
		"swfVersion": "v454",
		"hasCloudData": false,
		"userAgent": "Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/56.0.2924.87 Safari\/537.36"
	}
}
